/*
 * Copyright (C) 2018-2022 Jolla Ltd.
 * Copyright (C) 2018-2022 Slava Monich <slava.monich@jolla.com>
 * Copyright (C) 2021 Open Mobile Platform LLC.
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *   3. Neither the names of the copyright holders nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation
 * are those of the authors and should not be interpreted as representing
 * any official policies, either expressed or implied.
 */

#ifndef RADIO_TYPES_H
#define RADIO_TYPES_H

#include <gbinder_types.h>

G_BEGIN_DECLS

typedef struct radio_client RadioClient;
typedef struct radio_config RadioConfig;
typedef struct radio_instance RadioInstance;
typedef struct radio_registry RadioRegistry;
typedef struct radio_request RadioRequest;
typedef struct radio_request_group RadioRequestGroup;

typedef enum radio_block_status {
    RADIO_BLOCK_NONE,
    RADIO_BLOCK_QUEUED,
    RADIO_BLOCK_ACQUIRED
} RADIO_BLOCK; /* Since 1.4.3 */

typedef enum radio_interface {
    RADIO_INTERFACE_NONE = -1, /* Since 1.4.3 */
    RADIO_INTERFACE_1_0,
    RADIO_INTERFACE_1_1,
    RADIO_INTERFACE_1_2,
    RADIO_INTERFACE_1_3,
    RADIO_INTERFACE_1_4,
    RADIO_INTERFACE_1_5, /* Since 1.5.0 */
    RADIO_INTERFACE_COUNT
} RADIO_INTERFACE; /* Since 1.2.0 */

typedef enum radio_aidl_interface {
    RADIO_AIDL_INTERFACE_NONE = -1,
    RADIO_DATA_INTERFACE,
    // RADIO_IMS_INTERFACE,
    RADIO_MESSAGING_INTERFACE,
    RADIO_MODEM_INTERFACE,
    RADIO_NETWORK_INTERFACE,
    RADIO_SIM_INTERFACE,
    RADIO_VOICE_INTERFACE,
    RADIO_AIDL_INTERFACE_COUNT
} RADIO_AIDL_INTERFACE; /* Since 1.6.0 */

typedef enum radio_interface_type {
    RADIO_INTERFACE_TYPE_NONE,
    RADIO_INTERFACE_TYPE_HIDL,
    RADIO_INTERFACE_TYPE_AIDL,
} RADIO_INTERFACE_TYPE; /* Since 1.6.0 */

typedef enum radio_observer_priority {
    RADIO_OBSERVER_PRIORITY_LOWEST,
    RADIO_OBSERVER_PRIORITY_DEFAULT = 2,
    RADIO_OBSERVER_PRIORITY_HIGHEST = 7
} RADIO_OBSERVER_PRIORITY; /* Since 1.4.6 */

#define RADIO_IFACE_PREFIX     "android.hardware.radio@"
#define RADIO_IFACE            "IRadio"
#define RADIO_RESPONSE_IFACE   "IRadioResponse"
#define RADIO_INDICATION_IFACE "IRadioIndication"
#define RADIO_IFACE_1_0(x)     RADIO_IFACE_PREFIX "1.0::" x
#define RADIO_IFACE_1_1(x)     RADIO_IFACE_PREFIX "1.1::" x
#define RADIO_IFACE_1_2(x)     RADIO_IFACE_PREFIX "1.2::" x
#define RADIO_IFACE_1_3(x)     RADIO_IFACE_PREFIX "1.3::" x
#define RADIO_IFACE_1_4(x)     RADIO_IFACE_PREFIX "1.4::" x
#define RADIO_IFACE_1_5(x)     RADIO_IFACE_PREFIX "1.5::" x
#define RADIO_1_0              RADIO_IFACE_1_0(RADIO_IFACE)
#define RADIO_1_1              RADIO_IFACE_1_1(RADIO_IFACE)
#define RADIO_1_2              RADIO_IFACE_1_2(RADIO_IFACE)
#define RADIO_1_3              RADIO_IFACE_1_3(RADIO_IFACE)
#define RADIO_1_4              RADIO_IFACE_1_4(RADIO_IFACE)
#define RADIO_1_5              RADIO_IFACE_1_5(RADIO_IFACE)
#define RADIO_RESPONSE_1_0     RADIO_IFACE_1_0(RADIO_RESPONSE_IFACE)
#define RADIO_RESPONSE_1_1     RADIO_IFACE_1_1(RADIO_RESPONSE_IFACE)
#define RADIO_RESPONSE_1_2     RADIO_IFACE_1_2(RADIO_RESPONSE_IFACE)
#define RADIO_RESPONSE_1_3     RADIO_IFACE_1_3(RADIO_RESPONSE_IFACE)
#define RADIO_RESPONSE_1_4     RADIO_IFACE_1_4(RADIO_RESPONSE_IFACE)
#define RADIO_RESPONSE_1_5     RADIO_IFACE_1_5(RADIO_RESPONSE_IFACE)
#define RADIO_INDICATION_1_0   RADIO_IFACE_1_0(RADIO_INDICATION_IFACE)
#define RADIO_INDICATION_1_1   RADIO_IFACE_1_1(RADIO_INDICATION_IFACE)
#define RADIO_INDICATION_1_2   RADIO_IFACE_1_2(RADIO_INDICATION_IFACE)
#define RADIO_INDICATION_1_3   RADIO_IFACE_1_3(RADIO_INDICATION_IFACE)
#define RADIO_INDICATION_1_4   RADIO_IFACE_1_4(RADIO_INDICATION_IFACE)
#define RADIO_INDICATION_1_5   RADIO_IFACE_1_5(RADIO_INDICATION_IFACE)

/* Types defined in types.hal */

#define RADIO_ALIGNED(x) __attribute__ ((aligned(x)))

typedef enum radio_resp_type {
    RADIO_RESP_SOLICITED,
    RADIO_RESP_SOLICITED_ACK,
    RADIO_RESP_SOLICITED_ACK_EXP
} RADIO_RESP_TYPE;
G_STATIC_ASSERT(sizeof(RADIO_RESP_TYPE) == 4);

typedef enum radio_ind_type {
    RADIO_IND_UNSOLICITED,
    RADIO_IND_ACK_EXP
} RADIO_IND_TYPE;
G_STATIC_ASSERT(sizeof(RADIO_IND_TYPE) == 4);

typedef enum radio_error {
    RADIO_ERROR_NONE = 0,
    RADIO_ERROR_RADIO_NOT_AVAILABLE = 1,
    RADIO_ERROR_GENERIC_FAILURE = 2,
    RADIO_ERROR_PASSWORD_INCORRECT = 3,
    RADIO_ERROR_SIM_PIN2 = 4,
    RADIO_ERROR_SIM_PUK2 = 5,
    RADIO_ERROR_REQUEST_NOT_SUPPORTED = 6,
    RADIO_ERROR_CANCELLED = 7,
    RADIO_ERROR_OP_NOT_ALLOWED_DURING_VOICE_CALL = 8,
    RADIO_ERROR_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 9,
    RADIO_ERROR_SMS_SEND_FAIL_RETRY = 10,
    RADIO_ERROR_SIM_ABSENT = 11,
    RADIO_ERROR_SUBSCRIPTION_NOT_AVAILABLE = 12,
    RADIO_ERROR_MODE_NOT_SUPPORTED = 13,
    RADIO_ERROR_FDN_CHECK_FAILURE = 14,
    RADIO_ERROR_ILLEGAL_SIM_OR_ME = 15,
    RADIO_ERROR_MISSING_RESOURCE = 16,
    RADIO_ERROR_NO_SUCH_ELEMENT = 17,
    RADIO_ERROR_DIAL_MODIFIED_TO_USSD = 18,
    RADIO_ERROR_DIAL_MODIFIED_TO_SS = 19,
    RADIO_ERROR_DIAL_MODIFIED_TO_DIAL = 20,
    RADIO_ERROR_USSD_MODIFIED_TO_DIAL = 21,
    RADIO_ERROR_USSD_MODIFIED_TO_SS = 22,
    RADIO_ERROR_USSD_MODIFIED_TO_USSD = 23,
    RADIO_ERROR_SS_MODIFIED_TO_DIAL = 24,
    RADIO_ERROR_SS_MODIFIED_TO_USSD = 25,
    RADIO_ERROR_SUBSCRIPTION_NOT_SUPPORTED = 26,
    RADIO_ERROR_SS_MODIFIED_TO_SS = 27,
    RADIO_ERROR_LCE_NOT_SUPPORTED = 36,
    RADIO_ERROR_NO_MEMORY = 37,
    RADIO_ERROR_INTERNAL_ERR = 38,
    RADIO_ERROR_SYSTEM_ERR = 39,
    RADIO_ERROR_MODEM_ERR = 40,
    RADIO_ERROR_INVALID_STATE = 41,
    RADIO_ERROR_NO_RESOURCES = 42,
    RADIO_ERROR_SIM_ERR = 43,
    RADIO_ERROR_INVALID_ARGUMENTS = 44,
    RADIO_ERROR_INVALID_SIM_STATE = 45,
    RADIO_ERROR_INVALID_MODEM_STATE = 46,
    RADIO_ERROR_INVALID_CALL_ID = 47,
    RADIO_ERROR_NO_SMS_TO_ACK = 48,
    RADIO_ERROR_NETWORK_ERR = 49,
    RADIO_ERROR_REQUEST_RATE_LIMITED = 50,
    RADIO_ERROR_SIM_BUSY = 51,
    RADIO_ERROR_SIM_FULL = 52,
    RADIO_ERROR_NETWORK_REJECT = 53,
    RADIO_ERROR_OPERATION_NOT_ALLOWED = 54,
    RADIO_ERROR_EMPTY_RECORD = 55,
    RADIO_ERROR_INVALID_SMS_FORMAT = 56,
    RADIO_ERROR_ENCODING_ERR = 57,
    RADIO_ERROR_INVALID_SMSC_ADDRESS = 58,
    RADIO_ERROR_NO_SUCH_ENTRY = 59,
    RADIO_ERROR_NETWORK_NOT_READY = 60,
    RADIO_ERROR_NOT_PROVISIONED = 61,
    RADIO_ERROR_NO_SUBSCRIPTION = 62,
    RADIO_ERROR_NO_NETWORK_FOUND = 63,
    RADIO_ERROR_DEVICE_IN_USE = 64,
    RADIO_ERROR_ABORTED = 65,
    RADIO_ERROR_INVALID_RESPONSE = 66,
    RADIO_ERROR_OEM_ERROR_1 = 501,
    RADIO_ERROR_OEM_ERROR_2 = 502,
    RADIO_ERROR_OEM_ERROR_3 = 503,
    RADIO_ERROR_OEM_ERROR_4 = 504,
    RADIO_ERROR_OEM_ERROR_5 = 505,
    RADIO_ERROR_OEM_ERROR_6 = 506,
    RADIO_ERROR_OEM_ERROR_7 = 507,
    RADIO_ERROR_OEM_ERROR_8 = 508,
    RADIO_ERROR_OEM_ERROR_9 = 509,
    RADIO_ERROR_OEM_ERROR_10 = 510,
    RADIO_ERROR_OEM_ERROR_11 = 511,
    RADIO_ERROR_OEM_ERROR_12 = 512,
    RADIO_ERROR_OEM_ERROR_13 = 513,
    RADIO_ERROR_OEM_ERROR_14 = 514,
    RADIO_ERROR_OEM_ERROR_15 = 515,
    RADIO_ERROR_OEM_ERROR_16 = 516,
    RADIO_ERROR_OEM_ERROR_17 = 517,
    RADIO_ERROR_OEM_ERROR_18 = 518,
    RADIO_ERROR_OEM_ERROR_19 = 519,
    RADIO_ERROR_OEM_ERROR_20 = 520,
    RADIO_ERROR_OEM_ERROR_21 = 521,
    RADIO_ERROR_OEM_ERROR_22 = 522,
    RADIO_ERROR_OEM_ERROR_23 = 523,
    RADIO_ERROR_OEM_ERROR_24 = 524,
    RADIO_ERROR_OEM_ERROR_25 = 525
} RADIO_ERROR; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_ERROR) == 4);

typedef enum radio_state {
    RADIO_STATE_OFF = 0,
    RADIO_STATE_UNAVAILABLE = 1,
    RADIO_STATE_ON = 10
} RADIO_STATE;
G_STATIC_ASSERT(sizeof(RADIO_STATE) == 4);

typedef enum radio_reg_state {
    RADIO_REG_STATE_NOT_REG_NOT_SEARCHING = 0,
    RADIO_REG_STATE_REG_HOME = 1,
    RADIO_REG_STATE_NOT_REG_MT_SEARCHING = 2,
    RADIO_REG_STATE_REG_DENIED = 3,
    RADIO_REG_STATE_UNKNOWN = 4,
    RADIO_REG_STATE_REG_ROAMING = 5,
    RADIO_REG_STATE_NOT_REG_MT_NOT_SEARCHING_EM = 10,
    RADIO_REG_STATE_NOT_REG_MT_SEARCHING_EM = 12,
    RADIO_REG_STATE_REG_DENIED_EM = 13,
    RADIO_REG_STATE_UNKNOWN_EM = 14
} RADIO_REG_STATE;
G_STATIC_ASSERT(sizeof(RADIO_REG_STATE) == 4);

typedef enum radio_reg_access_technology_specific_info_type {
    RADIO_REG_ACCESS_TECHNOLOGY_SPECIFIC_INFO_NONE = 0,
    RADIO_REG_ACCESS_TECHNOLOGY_SPECIFIC_INFO_CDMA = 1,
    RADIO_REG_ACCESS_TECHNOLOGY_SPECIFIC_INFO_EUTRAN = 2
} RADIO_REG_ACCESS_TECHNOLOGY_SPECIFIC_INFO_TYPE; /* Since 1.5.0 */

typedef enum radio_ind_filter {
    RADIO_IND_FILTER_NONE = 0,
    RADIO_IND_FILTER_SIGNAL_STRENGTH = 0x01,
    RADIO_IND_FILTER_FULL_NETWORK_STATE = 0x02,
    RADIO_IND_FILTER_DATA_CALL_DORMANCY = 0x04,
    RADIO_IND_FILTER_ALL =
        RADIO_IND_FILTER_SIGNAL_STRENGTH |
        RADIO_IND_FILTER_FULL_NETWORK_STATE |
        RADIO_IND_FILTER_DATA_CALL_DORMANCY,
    /* Since 1.4.4 (those appeared in IRadio@1.2) */
    RADIO_IND_FILTER_LINK_CAPACITY_ESTIMATE = 0x08,
    RADIO_IND_FILTER_PHYSICAL_CHANNEL_CONFIG = 0x10,
    RADIO_IND_FILTER_ALL_1_2 =
        RADIO_IND_FILTER_ALL |
        RADIO_IND_FILTER_LINK_CAPACITY_ESTIMATE |
        RADIO_IND_FILTER_PHYSICAL_CHANNEL_CONFIG,
    /* Since 1.5.5 (those appeared in IRadio@1.5) */
    RADIO_IND_FILTER_REGISTRATION_FAILURE = 0x20,
    RADIO_IND_FILTER_BARRING_INFO = 0x40,
    RADIO_IND_FILTER_ALL_1_5 = ~0
} RADIO_IND_FILTER;
G_STATIC_ASSERT(sizeof(RADIO_IND_FILTER) == 4);

typedef enum radio_call_state {
    RADIO_CALL_ACTIVE,
    RADIO_CALL_HOLDING,
    RADIO_CALL_DIALING,
    RADIO_CALL_ALERTING,
    RADIO_CALL_INCOMING,
    RADIO_CALL_WAITING
} RADIO_CALL_STATE;
G_STATIC_ASSERT(sizeof(RADIO_CALL_STATE) == 4);

typedef enum radio_operator_status {
    RADIO_OP_STATUS_UNKNOWN = 0,
    RADIO_OP_AVAILABLE,
    RADIO_OP_CURRENT,
    RADIO_OP_FORBIDDEN
} RADIO_OP_STATUS;
G_STATIC_ASSERT(sizeof(RADIO_OP_STATUS) == 4);

typedef enum radio_cell_info_type {
    RADIO_CELL_INFO_GSM = 1,
    RADIO_CELL_INFO_CDMA,
    RADIO_CELL_INFO_LTE,
    RADIO_CELL_INFO_WCDMA,
    RADIO_CELL_INFO_TD_SCDMA
} RADIO_CELL_INFO_TYPE;
G_STATIC_ASSERT(sizeof(RADIO_CELL_INFO_TYPE) == 4);

/* Cast guint8 RadioCellInfo_1_4.cellInfoType to this. */
typedef enum radio_cell_info_type_1_4 {
    RADIO_CELL_INFO_1_4_GSM = 0,
    RADIO_CELL_INFO_1_4_CDMA,
    RADIO_CELL_INFO_1_4_WCDMA,
    RADIO_CELL_INFO_1_4_TD_SCDMA,
    RADIO_CELL_INFO_1_4_LTE,
    RADIO_CELL_INFO_1_4_NR
} RADIO_CELL_INFO_TYPE_1_4; /* Since 1.4.1 */

/* Cast guint8 RadioCellInfo_1_5.cellInfoType to this. */
typedef enum radio_cell_info_type_1_5 {
    RADIO_CELL_INFO_1_5_GSM = 0,
    RADIO_CELL_INFO_1_5_WCDMA,
    RADIO_CELL_INFO_1_5_TD_SCDMA,
    RADIO_CELL_INFO_1_5_LTE,
    RADIO_CELL_INFO_1_5_NR,
    RADIO_CELL_INFO_1_5_CDMA
} RADIO_CELL_INFO_TYPE_1_5; /* Since 1.5.0 */

/* Cast guint8 RadioCellIdentity_1_5.cellIdentityType to this. */
typedef enum radio_cell_identity_type_1_5 {
    RADIO_CELL_IDENTITY_1_5_NONE = 0,
    RADIO_CELL_IDENTITY_1_5_GSM,
    RADIO_CELL_IDENTITY_1_5_WCDMA,
    RADIO_CELL_IDENTITY_1_5_TD_SCDMA,
    RADIO_CELL_IDENTITY_1_5_CDMA,
    RADIO_CELL_IDENTITY_1_5_LTE,
    RADIO_CELL_IDENTITY_1_5_NR
} RADIO_CELL_IDENTITY_TYPE_1_5; /* Since 1.5.0 */

/* Valid values of RadioNetworkScanRequest_1_5::type */
typedef enum radio_network_scan_specifier_1_5_type {
    RADIO_NETWORK_SCAN_SPECIFIER_1_5_GERAN = 0,
    RADIO_NETWORK_SCAN_SPECIFIER_1_5_UTRAN,
    RADIO_NETWORK_SCAN_SPECIFIER_1_5_EUTRAN,
    RADIO_NETWORK_SCAN_SPECIFIER_1_5_NGRAN
} RADIO_NETWORK_SCAN_SPECIFIER_1_5_TYPE; /* Since 1.5.2 */

typedef enum radio_frequency_info_type {
    RADIO_FREQUENCY_INFO_TYPE_RANGE,
    RADIO_FREQUENCY_INFO_TYPE_CHANNEL_NUMBER,
} RADIO_FREQUENCY_INFO_TYPE; /* Since 1.5.4 */;

typedef enum radio_frequency_range {
    /* Indicates the frequency range is below 1GHz. */
    RADIO_FREQUENCY_RANGE_LOW = 1,
    /* Indicates the frequency range is between 1GHz and 3GHz. */
    RADIO_FREQUENCY_RANGE_MID,
    /* Indicates the frequency range is between 3GHz and 6GHz. */
    RADIO_FREQUENCY_RANGE_HIGH,
    /* Indicates the frequency range is above 6GHz (millimeter wave frequency). */
    RADIO_FREQUENCY_RANGE_MMWAVE,
} RADIO_FREQUENCY_RANGE; /* Since 1.5.4 */;
G_STATIC_ASSERT(sizeof(RADIO_FREQUENCY_RANGE) == 4);

typedef enum radio_tech {
    RADIO_TECH_UNKNOWN = 0,
    RADIO_TECH_GPRS,
    RADIO_TECH_EDGE,
    RADIO_TECH_UMTS,
    RADIO_TECH_IS95A,
    RADIO_TECH_IS95B,
    RADIO_TECH_ONE_X_RTT,
    RADIO_TECH_EVDO_0,
    RADIO_TECH_EVDO_A,
    RADIO_TECH_HSDPA,
    RADIO_TECH_HSUPA,
    RADIO_TECH_HSPA,
    RADIO_TECH_EVDO_B,
    RADIO_TECH_EHRPD,
    RADIO_TECH_LTE,
    RADIO_TECH_HSPAP,
    RADIO_TECH_GSM,
    RADIO_TECH_TD_SCDMA,
    RADIO_TECH_IWLAN,
    RADIO_TECH_LTE_CA,
    RADIO_TECH_NR /* Since 1.5.4 */
} RADIO_TECH;
G_STATIC_ASSERT(sizeof(RADIO_TECH) == 4);

typedef enum radio_access_family {
    RAF_NONE = 0,  /* Since 1.4.3 */
    RAF_UNKNOWN = (1 << RADIO_TECH_UNKNOWN),
    RAF_GPRS = (1 << RADIO_TECH_GPRS),
    RAF_EDGE = (1 << RADIO_TECH_EDGE),
    RAF_UMTS = (1 << RADIO_TECH_UMTS),
    RAF_IS95A = (1 << RADIO_TECH_IS95A),
    RAF_IS95B = (1 << RADIO_TECH_IS95B),
    RAF_ONE_X_RTT = (1 << RADIO_TECH_ONE_X_RTT),
    RAF_EVDO_0 = (1 << RADIO_TECH_EVDO_0),
    RAF_EVDO_A = (1 << RADIO_TECH_EVDO_A),
    RAF_HSDPA = (1 << RADIO_TECH_HSDPA),
    RAF_HSUPA = (1 << RADIO_TECH_HSUPA),
    RAF_HSPA = (1 << RADIO_TECH_HSPA),
    RAF_EVDO_B = (1 << RADIO_TECH_EVDO_B),
    RAF_EHRPD = (1 << RADIO_TECH_EHRPD),
    RAF_LTE = (1 << RADIO_TECH_LTE),
    RAF_HSPAP = (1 << RADIO_TECH_HSPAP),
    RAF_GSM = (1 << RADIO_TECH_GSM),
    RAF_TD_SCDMA = (1 << RADIO_TECH_TD_SCDMA),
    RAF_IWLAN = (1 << RADIO_TECH_IWLAN),
    RAF_LTE_CA = (1 << RADIO_TECH_LTE_CA),
    RAF_NR = (1 << RADIO_TECH_NR) /* Since 1.5.4 */
} RADIO_ACCESS_FAMILY;
G_STATIC_ASSERT(sizeof(RADIO_ACCESS_FAMILY) == 4);

typedef enum radio_apn_auth_type {
    RADIO_APN_AUTH_NONE,
    RADIO_APN_AUTH_PAP,
    RADIO_APN_AUTH_CHAP,
    RADIO_APN_AUTH_PAP_CHAP
} RADIO_APN_AUTH_TYPE;
G_STATIC_ASSERT(sizeof(RADIO_APN_AUTH_TYPE) == 4);

typedef enum radio_apn_types {
    RADIO_APN_TYPE_NONE = 0,
    RADIO_APN_TYPE_DEFAULT = 1 << 0,
    RADIO_APN_TYPE_MMS = 1 << 1,
    RADIO_APN_TYPE_SUPL = 1 << 2,
    RADIO_APN_TYPE_DUN = 1 << 3,
    RADIO_APN_TYPE_HIPRI = 1 << 4,
    RADIO_APN_TYPE_FOTA = 1 << 5,
    RADIO_APN_TYPE_IMS = 1 << 6,
    RADIO_APN_TYPE_CBS = 1 << 7,
    RADIO_APN_TYPE_IA = 1 << 8,
    RADIO_APN_TYPE_EMERGENCY = 1 << 9,
    RADIO_APN_TYPE_MCX = 1 << 10, /* Since 1.2.5 */
    RADIO_APN_TYPE_XCAP = 1 << 11, /* Since 1.5.0 */
    RADIO_APN_TYPE_ALL = RADIO_APN_TYPE_DEFAULT | RADIO_APN_TYPE_MMS |
        RADIO_APN_TYPE_SUPL | RADIO_APN_TYPE_DUN | RADIO_APN_TYPE_HIPRI |
        RADIO_APN_TYPE_FOTA | RADIO_APN_TYPE_IMS | RADIO_APN_TYPE_CBS |
        RADIO_APN_TYPE_IA | RADIO_APN_TYPE_EMERGENCY | RADIO_APN_TYPE_MCX |
        RADIO_APN_TYPE_XCAP
} RADIO_APN_TYPES;
G_STATIC_ASSERT(sizeof(RADIO_APN_TYPES) == 4);

typedef enum radio_data_profile_id {
    RADIO_DATA_PROFILE_INVALID = -1,
    RADIO_DATA_PROFILE_DEFAULT = 0,
    RADIO_DATA_PROFILE_TETHERED = 1,
    RADIO_DATA_PROFILE_IMS = 2,
    RADIO_DATA_PROFILE_FOTA = 3,
    RADIO_DATA_PROFILE_CBS = 4,
    RADIO_DATA_PROFILE_OEM_BASE = 1000
} RADIO_DATA_PROFILE_ID;
G_STATIC_ASSERT(sizeof(RADIO_DATA_PROFILE_ID) == 4);

typedef enum radio_card_state {
    RADIO_CARD_STATE_ABSENT,
    RADIO_CARD_STATE_PRESENT,
    RADIO_CARD_STATE_ERROR,
    RADIO_CARD_STATE_RESTRICTED
} RADIO_CARD_STATE;
G_STATIC_ASSERT(sizeof(RADIO_CARD_STATE) == 4);

typedef enum radio_pin_state {
    RADIO_PIN_STATE_UNKNOWN,
    RADIO_PIN_STATE_ENABLED_NOT_VERIFIED,
    RADIO_PIN_STATE_ENABLED_VERIFIED,
    RADIO_PIN_STATE_DISABLED,
    RADIO_PIN_STATE_ENABLED_BLOCKED,
    RADIO_PIN_STATE_ENABLED_PERM_BLOCKED
} RADIO_PIN_STATE;
G_STATIC_ASSERT(sizeof(RADIO_PIN_STATE) == 4);

typedef enum radio_app_type {
    RADIO_APP_TYPE_UNKNOWN,
    RADIO_APP_TYPE_SIM,
    RADIO_APP_TYPE_USIM,
    RADIO_APP_TYPE_RUIM,
    RADIO_APP_TYPE_CSIM,
    RADIO_APP_TYPE_ISIM
} RADIO_APP_TYPE;
G_STATIC_ASSERT(sizeof(RADIO_APP_TYPE) == 4);

typedef enum radio_app_state {
    RADIO_APP_STATE_UNKNOWN,
    RADIO_APP_STATE_DETECTED,
    RADIO_APP_STATE_PIN,
    RADIO_APP_STATE_PUK,
    RADIO_APP_STATE_SUBSCRIPTION_PERSO,
    RADIO_APP_STATE_READY
} RADIO_APP_STATE;
G_STATIC_ASSERT(sizeof(RADIO_APP_STATE) == 4);

typedef enum radio_perso_substate {
    RADIO_PERSO_SUBSTATE_UNKNOWN,
    RADIO_PERSO_SUBSTATE_IN_PROGRESS,
    RADIO_PERSO_SUBSTATE_READY,
    RADIO_PERSO_SUBSTATE_SIM_NETWORK,
    RADIO_PERSO_SUBSTATE_SIM_NETWORK_SUBSET,
    RADIO_PERSO_SUBSTATE_SIM_CORPORATE,
    RADIO_PERSO_SUBSTATE_SIM_SERVICE_PROVIDER,
    RADIO_PERSO_SUBSTATE_SIM_SIM,
    RADIO_PERSO_SUBSTATE_SIM_NETWORK_PUK,
    RADIO_PERSO_SUBSTATE_SIM_NETWORK_SUBSET_PUK,
    RADIO_PERSO_SUBSTATE_SIM_CORPORATE_PUK,
    RADIO_PERSO_SUBSTATE_SIM_SERVICE_PROVIDER_PUK,
    RADIO_PERSO_SUBSTATE_SIM_SIM_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_NETWORK1,
    RADIO_PERSO_SUBSTATE_RUIM_NETWORK2,
    RADIO_PERSO_SUBSTATE_RUIM_HRPD,
    RADIO_PERSO_SUBSTATE_RUIM_CORPORATE,
    RADIO_PERSO_SUBSTATE_RUIM_SERVICE_PROVIDER,
    RADIO_PERSO_SUBSTATE_RUIM_RUIM,
    RADIO_PERSO_SUBSTATE_RUIM_NETWORK1_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_NETWORK2_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_HRPD_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_CORPORATE_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_SERVICE_PROVIDER_PUK,
    RADIO_PERSO_SUBSTATE_RUIM_RUIM_PUK,
} RADIO_PERSO_SUBSTATE;
G_STATIC_ASSERT(sizeof(RADIO_PERSO_SUBSTATE) == 4);

typedef enum radio_capability_phase {
    RADIO_CAPABILITY_PHASE_CONFIGURED,
    RADIO_CAPABILITY_PHASE_START,
    RADIO_CAPABILITY_PHASE_APPLY,
    RADIO_CAPABILITY_PHASE_UNSOL_RSP,
    RADIO_CAPABILITY_PHASE_FINISH
} RADIO_CAPABILITY_PHASE;
G_STATIC_ASSERT(sizeof(RADIO_CAPABILITY_PHASE) == 4);

typedef enum radio_capability_status {
    RADIO_CAPABILITY_STATUS_NONE,
    RADIO_CAPABILITY_STATUS_SUCCESS,
    RADIO_CAPABILITY_STATUS_FAIL
} RADIO_CAPABILITY_STATUS;
G_STATIC_ASSERT(sizeof(RADIO_CAPABILITY_STATUS) == 4);

typedef enum radio_device_state {
    RADIO_DEVICE_STATE_POWER_SAVE_MODE,
    RADIO_DEVICE_STATE_CHARGING_STATE,
    RADIO_DEVICE_STATE_LOW_DATA_EXPECTED
} RADIO_DEVICE_STATE;
G_STATIC_ASSERT(sizeof(RADIO_DEVICE_STATE) == 4);

typedef enum radio_data_request_reason {
    RADIO_DATA_REQUEST_REASON_NORMAL = 1,
    RADIO_DATA_REQUEST_REASON_SHUTDOWN,
    RADIO_DATA_REQUEST_REASON_HANDOVER
} RADIO_DATA_REQUEST_REASON; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RADIO_DATA_REQUEST_REASON) == 4);

/* This is AccessNetwork from types.hal */
typedef enum radio_access_network {
    RADIO_ACCESS_NETWORK_UNKNOWN,
    RADIO_ACCESS_NETWORK_GERAN,
    RADIO_ACCESS_NETWORK_UTRAN,
    RADIO_ACCESS_NETWORK_EUTRAN,
    RADIO_ACCESS_NETWORK_CDMA2000,
    RADIO_ACCESS_NETWORK_IWLAN,
    RADIO_ACCESS_NETWORK_NGRAN /* Since 1.5.0 */
} RADIO_ACCESS_NETWORK; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RADIO_ACCESS_NETWORK) == 4);

/* And this is RadioAccessNetworks (easy to confuse with AccessNetwork) */
typedef enum radio_access_networks {
    RADIO_ACCESS_NETWORKS_UNKNOWN,
    RADIO_ACCESS_NETWORKS_GERAN,
    RADIO_ACCESS_NETWORKS_UTRAN,
    RADIO_ACCESS_NETWORKS_EUTRAN,
    RADIO_ACCESS_NETWORKS_NGRAN,
    RADIO_ACCESS_NETWORKS_CDMA2000
} RADIO_ACCESS_NETWORKS; /* Since 1.5.3 */
G_STATIC_ASSERT(sizeof(RADIO_ACCESS_NETWORKS) == 4);

typedef enum radio_data_profile_type {
    RADIO_DATA_PROFILE_COMMON,
    RADIO_DATA_PROFILE_3GPP,
    RADIO_DATA_PROFILE_3GPP2
} RADIO_DATA_PROFILE_TYPE; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_DATA_PROFILE_TYPE) == 4);

typedef enum radio_tech_family {
    RADIO_TECH_FAMILY_3GPP,
    RADIO_TECH_FAMILY_3GPP2
} RADIO_TECH_FAMILY; /* Since 1.4.9 */
G_STATIC_ASSERT(sizeof(RADIO_TECH_FAMILY) == 4);

typedef enum radio_pdp_protocol_type {
    RADIO_PDP_PROTOCOL_UNKNOWN = -1,
    RADIO_PDP_PROTOCOL_IP,
    RADIO_PDP_PROTOCOL_IPV6,
    RADIO_PDP_PROTOCOL_IPV4V6,
    RADIO_PDP_PROTOCOL_PPP,
    RADIO_PDP_PROTOCOL_NON_IP,
    RADIO_PDP_PROTOCOL_UNSTRUCTURED
} RADIO_PDP_PROTOCOL_TYPE; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_PDP_PROTOCOL_TYPE) == 4);

typedef enum radio_emergency_service_category {
    RADIO_EMERGENCY_SERVICE_UNSPECIFIED = 0,
    RADIO_EMERGENCY_SERVICE_POLICE = 1 << 0,
    RADIO_EMERGENCY_SERVICE_AMBULANCE = 1 << 1,
    RADIO_EMERGENCY_SERVICE_FIRE_BRIGADE = 1 << 2,
    RADIO_EMERGENCY_SERVICE_MARINE_GUARD = 1 << 3,
    RADIO_EMERGENCY_SERVICE_MOUNTAIN_RESCUE = 1 << 4,
    RADIO_EMERGENCY_SERVICE_MIEC = 1 << 5,
    RADIO_EMERGENCY_SERVICE_AIEC = 1 << 6
} RADIO_EMERGENCY_SERVICE_CATEGORY; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_EMERGENCY_SERVICE_CATEGORY) == 4);

typedef enum radio_emergency_number_source {
    RADIO_EMERGENCY_NUMBER_NETWORK_SIGNALING = 1 << 0,
    RADIO_EMERGENCY_NUMBER_SIM = 1 << 1,
    RADIO_EMERGENCY_NUMBER_MODEM_CONFIG = 1 << 2,
    RADIO_EMERGENCY_NUMBER_DEFAULT = 1 << 3
} RADIO_EMERGENCY_NUMBER_SOURCE; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_EMERGENCY_NUMBER_SOURCE) == 4);

typedef enum radio_cell_connection_status {
    RADIO_CELL_CONNECTION_NONE,
    RADIO_CELL_CONNECTION_PRIMARY_SERVING,
    RADIO_CELL_CONNECTION_SECONDARY_SERVING
} RADIO_CELL_CONNECTION_STATUS; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_CELL_CONNECTION_STATUS) == 4);

typedef enum radio_scan_status {
    RADIO_SCAN_PARTIAL = 1,
    RADIO_SCAN_COMPLETE = 2
} RADIO_SCAN_STATUS; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RADIO_SCAN_STATUS) == 4);

typedef enum radio_scan_type {
    RADIO_SCAN_ONE_SHOT,
    RADIO_SCAN_PERIODIC
} RADIO_SCAN_TYPE; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RADIO_SCAN_TYPE) == 4);

typedef enum radio_uicc_sub_act {
    RADIO_UICC_SUB_DEACTIVATE,
    RADIO_UICC_SUB_ACTIVATE
} RADIO_UICC_SUB_ACT; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_UICC_SUB_ACT) == 4);

typedef enum radio_service_class {
    RADIO_SERVICE_CLASS_NONE = 0,
    RADIO_SERVICE_CLASS_VOICE = 1 << 0,
    RADIO_SERVICE_CLASS_DATA = 1 << 1,
    RADIO_SERVICE_CLASS_FAX = 1 << 2,
    RADIO_SERVICE_CLASS_SMS = 1 << 3,
    RADIO_SERVICE_CLASS_DATA_SYNC = 1 << 4,
    RADIO_SERVICE_CLASS_DATA_ASYNC = 1 << 5,
    RADIO_SERVICE_CLASS_PACKET = 1 << 6,
    RADIO_SERVICE_CLASS_PAD = 1 << 7
} RADIO_SERVICE_CLASS;  /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_SERVICE_CLASS) == 4);

typedef enum radio_call_forward {
    RADIO_CALL_FORWARD_DISABLE,
    RADIO_CALL_FORWARD_ENABLE,
    RADIO_CALL_FORWARD_INTERROGATE,
    RADIO_CALL_FORWARD_REGISTRATION,
    RADIO_CALL_FORWARD_ERASURE
} RADIO_CALL_FORWARD; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_CALL_FORWARD) == 4);

typedef enum radio_data_call_active_status {
    RADIO_DATA_CALL_INACTIVE = 0,
    RADIO_DATA_CALL_DORMANT = 1,
    RADIO_DATA_CALL_ACTIVE = 2
} RADIO_DATA_CALL_ACTIVE_STATUS; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_DATA_CALL_ACTIVE_STATUS) == 4);

typedef enum radio_restricted_state {
    RADIO_RESTRICTED_STATE_NONE = 0x00,
    RADIO_RESTRICTED_STATE_CS_EMERGENCY = 0x01,
    RADIO_RESTRICTED_STATE_CS_NORMAL = 0x02,
    RADIO_RESTRICTED_STATE_CS_ALL = 0x04,
    RADIO_RESTRICTED_STATE_PS_ALL = 0x10
} RADIO_RESTRICTED_STATE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_RESTRICTED_STATE) == 4);

typedef enum radio_pref_net_type {
    RADIO_PREF_NET_INVALID = -1,
    RADIO_PREF_NET_GSM_WCDMA,
    RADIO_PREF_NET_GSM_ONLY,
    RADIO_PREF_NET_WCDMA,
    RADIO_PREF_NET_GSM_WCDMA_AUTO,
    RADIO_PREF_NET_CDMA_EVDO_AUTO,
    RADIO_PREF_NET_CDMA_ONLY,
    RADIO_PREF_NET_EVDO_ONLY,
    RADIO_PREF_NET_GSM_WCDMA_CDMA_EVDO_AUTO,
    RADIO_PREF_NET_LTE_CDMA_EVDO,
    RADIO_PREF_NET_LTE_GSM_WCDMA,
    RADIO_PREF_NET_LTE_CMDA_EVDO_GSM_WCDMA,
    RADIO_PREF_NET_LTE_ONLY,
    RADIO_PREF_NET_LTE_WCDMA,
    RADIO_PREF_NET_TD_SCDMA_ONLY,
    RADIO_PREF_NET_TD_SCDMA_WCDMA,
    RADIO_PREF_NET_TD_SCDMA_LTE,
    RADIO_PREF_NET_TD_SCDMA_GSM,
    RADIO_PREF_NET_TD_SCDMA_GSM_LTE,
    RADIO_PREF_NET_TD_SCDMA_GSM_WCDMA,
    RADIO_PREF_NET_TD_SCDMA_WCDMA_LTE,
    RADIO_PREF_NET_TD_SCDMA_GSM_WCDMA_LTE,
    RADIO_PREF_NET_TD_SCDMA_GSM_WCDMA_CDMA_EVDO_AUTO,
    RADIO_PREF_NET_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA
} RADIO_PREF_NET_TYPE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_PREF_NET_TYPE) == 4);

typedef enum radio_ussd_type {
    RADIO_USSD_NOTIFY,
    RADIO_USSD_REQUEST,
    RADIO_USSD_NW_RELEASE,
    RADIO_USSD_LOCAL_CLIENT,
    RADIO_USSD_NOT_SUPPORTED,
    RADIO_USSD_NW_TIMEOUT
} RADIO_USSD_TYPE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_USSD_TYPE) == 4);

typedef enum radio_sms_ack_fail_cause {
    RADIO_SMS_ACK_FAIL_NONE = 0,
    RADIO_SMS_ACK_FAIL_MEMORY_CAPACITY_EXCEEDED = 0xD3,
    RADIO_SMS_ACK_FAIL_UNSPECIFIED_ERROR = 0XFF
} RADIO_SMS_ACK_FAIL_CAUSE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_SMS_ACK_FAIL_CAUSE) == 4);

typedef enum radio_clir {
    RADIO_CLIR_DEFAULT,
    RADIO_CLIR_INVOCATION,
    RADIO_CLIR_SUPPRESSION
} RADIO_CLIR; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_CLIR) == 4);

typedef enum radio_geran_band {
    RADIO_GERAN_BAND_T380 = 1,
    RADIO_GERAN_BAND_T410 = 2,
    RADIO_GERAN_BAND_450 = 3,
    RADIO_GERAN_BAND_480 = 4,
    RADIO_GERAN_BAND_710 = 5,
    RADIO_GERAN_BAND_750 = 6,
    RADIO_GERAN_BAND_T810 = 7,
    RADIO_GERAN_BAND_850 = 8,
    RADIO_GERAN_BAND_P900 = 9,
    RADIO_GERAN_BAND_E900 = 10,
    RADIO_GERAN_BAND_R900 = 11,
    RADIO_GERAN_BAND_DCS1800 = 12,
    RADIO_GERAN_BAND_PCS1900 = 13,
    RADIO_GERAN_BAND_ER900 = 14
} RADIO_GERAN_BAND; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RADIO_GERAN_BAND) == 4);

typedef enum radio_utran_band {
    RADIO_UTRAN_BAND_1 = 1,
    RADIO_UTRAN_BAND_2 = 2,
    RADIO_UTRAN_BAND_3 = 3,
    RADIO_UTRAN_BAND_4 = 4,
    RADIO_UTRAN_BAND_5 = 5,
    RADIO_UTRAN_BAND_6 = 6,
    RADIO_UTRAN_BAND_7 = 7,
    RADIO_UTRAN_BAND_8 = 8,
    RADIO_UTRAN_BAND_9 = 9,
    RADIO_UTRAN_BAND_10 = 10,
    RADIO_UTRAN_BAND_11 = 11,
    RADIO_UTRAN_BAND_12 = 12,
    RADIO_UTRAN_BAND_13 = 13,
    RADIO_UTRAN_BAND_14 = 14,
    RADIO_UTRAN_BAND_19 = 19,
    RADIO_UTRAN_BAND_20 = 20,
    RADIO_UTRAN_BAND_21 = 21,
    RADIO_UTRAN_BAND_22 = 22,
    RADIO_UTRAN_BAND_25 = 25,
    RADIO_UTRAN_BAND_26 = 26,
    RADIO_UTRAN_BAND_A = 101, /* Since IRadio 1.5 */
    RADIO_UTRAN_BAND_B = 102, /* Since IRadio 1.5 */
    RADIO_UTRAN_BAND_C = 103, /* Since IRadio 1.5 */
    RADIO_UTRAN_BAND_D = 104, /* Since IRadio 1.5 */
    RADIO_UTRAN_BAND_E = 105, /* Since IRadio 1.5 */
    RADIO_UTRAN_BAND_F = 106  /* Since IRadio 1.5 */
} RADIO_UTRAN_BAND; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RADIO_UTRAN_BAND) == 4);

typedef enum radio_eutran_band {
    RADIO_EUTRAN_BAND_1 = 1,
    RADIO_EUTRAN_BAND_2 = 2,
    RADIO_EUTRAN_BAND_3 = 3,
    RADIO_EUTRAN_BAND_4 = 4,
    RADIO_EUTRAN_BAND_5 = 5,
    RADIO_EUTRAN_BAND_6 = 6,
    RADIO_EUTRAN_BAND_7 = 7,
    RADIO_EUTRAN_BAND_8 = 8,
    RADIO_EUTRAN_BAND_9 = 9,
    RADIO_EUTRAN_BAND_10 = 10,
    RADIO_EUTRAN_BAND_11 = 11,
    RADIO_EUTRAN_BAND_12 = 12,
    RADIO_EUTRAN_BAND_13 = 13,
    RADIO_EUTRAN_BAND_14 = 14,
    RADIO_EUTRAN_BAND_17 = 17,
    RADIO_EUTRAN_BAND_18 = 18,
    RADIO_EUTRAN_BAND_19 = 19,
    RADIO_EUTRAN_BAND_20 = 20,
    RADIO_EUTRAN_BAND_21 = 21,
    RADIO_EUTRAN_BAND_22 = 22,
    RADIO_EUTRAN_BAND_23 = 23,
    RADIO_EUTRAN_BAND_24 = 24,
    RADIO_EUTRAN_BAND_25 = 25,
    RADIO_EUTRAN_BAND_26 = 26,
    RADIO_EUTRAN_BAND_27 = 27,
    RADIO_EUTRAN_BAND_28 = 28,
    RADIO_EUTRAN_BAND_30 = 30,
    RADIO_EUTRAN_BAND_31 = 31,
    RADIO_EUTRAN_BAND_33 = 33,
    RADIO_EUTRAN_BAND_34 = 34,
    RADIO_EUTRAN_BAND_35 = 35,
    RADIO_EUTRAN_BAND_36 = 36,
    RADIO_EUTRAN_BAND_37 = 37,
    RADIO_EUTRAN_BAND_38 = 38,
    RADIO_EUTRAN_BAND_39 = 39,
    RADIO_EUTRAN_BAND_40 = 40,
    RADIO_EUTRAN_BAND_41 = 41,
    RADIO_EUTRAN_BAND_42 = 42,
    RADIO_EUTRAN_BAND_43 = 43,
    RADIO_EUTRAN_BAND_44 = 44,
    RADIO_EUTRAN_BAND_45 = 45,
    RADIO_EUTRAN_BAND_46 = 46,
    RADIO_EUTRAN_BAND_47 = 47,
    RADIO_EUTRAN_BAND_48 = 48,
    RADIO_EUTRAN_BAND_49 = 49, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_50 = 50, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_51 = 51, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_52 = 52, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_53 = 53, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_65 = 65,
    RADIO_EUTRAN_BAND_66 = 66,
    RADIO_EUTRAN_BAND_68 = 68,
    RADIO_EUTRAN_BAND_70 = 70,
    RADIO_EUTRAN_BAND_71 = 71, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_72 = 72, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_73 = 73, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_74 = 74, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_85 = 85, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_87 = 87, /* Since IRadio 1.5 */
    RADIO_EUTRAN_BAND_88 = 88  /* Since IRadio 1.5 */
} RADIO_EUTRAN_BAND; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RADIO_EUTRAN_BAND) == 4);

typedef enum radio_ngran_band {
    RADIO_NGRAN_BAND_1 = 1,
    RADIO_NGRAN_BAND_2 = 2,
    RADIO_NGRAN_BAND_3 = 3,
    RADIO_NGRAN_BAND_5 = 5,
    RADIO_NGRAN_BAND_7 = 7,
    RADIO_NGRAN_BAND_8 = 8,
    RADIO_NGRAN_BAND_12 = 12,
    RADIO_NGRAN_BAND_14 = 14,
    RADIO_NGRAN_BAND_18 = 18,
    RADIO_NGRAN_BAND_20 = 20,
    RADIO_NGRAN_BAND_25 = 25,
    RADIO_NGRAN_BAND_28 = 28,
    RADIO_NGRAN_BAND_29 = 29,
    RADIO_NGRAN_BAND_30 = 30,
    RADIO_NGRAN_BAND_34 = 34,
    RADIO_NGRAN_BAND_38 = 38,
    RADIO_NGRAN_BAND_39 = 39,
    RADIO_NGRAN_BAND_40 = 40,
    RADIO_NGRAN_BAND_41 = 41,
    RADIO_NGRAN_BAND_48 = 48,
    RADIO_NGRAN_BAND_50 = 50,
    RADIO_NGRAN_BAND_51 = 51,
    RADIO_NGRAN_BAND_65 = 65,
    RADIO_NGRAN_BAND_66 = 66,
    RADIO_NGRAN_BAND_70 = 70,
    RADIO_NGRAN_BAND_71 = 71,
    RADIO_NGRAN_BAND_74 = 74,
    RADIO_NGRAN_BAND_75 = 75,
    RADIO_NGRAN_BAND_76 = 76,
    RADIO_NGRAN_BAND_77 = 77,
    RADIO_NGRAN_BAND_78 = 78,
    RADIO_NGRAN_BAND_79 = 79,
    RADIO_NGRAN_BAND_80 = 80,
    RADIO_NGRAN_BAND_81 = 81,
    RADIO_NGRAN_BAND_82 = 82,
    RADIO_NGRAN_BAND_83 = 83,
    RADIO_NGRAN_BAND_84 = 84,
    RADIO_NGRAN_BAND_86 = 86,
    RADIO_NGRAN_BAND_89 = 89,
    RADIO_NGRAN_BAND_90 = 90,
    RADIO_NGRAN_BAND_91 = 91,
    RADIO_NGRAN_BAND_92 = 92,
    RADIO_NGRAN_BAND_93 = 93,
    RADIO_NGRAN_BAND_94 = 94,
    RADIO_NGRAN_BAND_95 = 95,
    RADIO_NGRAN_BAND_257 = 257,
    RADIO_NGRAN_BAND_258 = 258,
    RADIO_NGRAN_BAND_260 = 260,
    RADIO_NGRAN_BAND_261 = 261
} RADIO_NGRAN_BAND; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RADIO_NGRAN_BAND) == 4);

typedef enum radio_last_call_fail_cause {
    RADIO_LAST_CALL_FAIL_NONE = 0,
    RADIO_LAST_CALL_FAIL_UNOBTAINABLE_NUMBER = 1,
    RADIO_LAST_CALL_FAIL_NO_ROUTE_TO_DESTINATION = 3,
    RADIO_LAST_CALL_FAIL_CHANNEL_UNACCEPTABLE = 6,
    RADIO_LAST_CALL_FAIL_OPERATOR_DETERMINED_BARRING = 8,
    RADIO_LAST_CALL_FAIL_NORMAL = 16,
    RADIO_LAST_CALL_FAIL_BUSY = 17,
    RADIO_LAST_CALL_FAIL_NO_USER_RESPONDING = 18,
    RADIO_LAST_CALL_FAIL_NO_ANSWER_FROM_USER = 19,
    RADIO_LAST_CALL_FAIL_CALL_REJECTED = 21,
    RADIO_LAST_CALL_FAIL_NUMBER_CHANGED = 22,
    RADIO_LAST_CALL_FAIL_PREEMPTION = 25,
    RADIO_LAST_CALL_FAIL_DESTINATION_OUT_OF_ORDER = 27,
    RADIO_LAST_CALL_FAIL_INVALID_NUMBER_FORMAT = 28,
    RADIO_LAST_CALL_FAIL_FACILITY_REJECTED = 29,
    RADIO_LAST_CALL_FAIL_RESP_TO_STATUS_ENQUIRY = 30,
    RADIO_LAST_CALL_FAIL_NORMAL_UNSPECIFIED = 31,
    RADIO_LAST_CALL_FAIL_CONGESTION = 34,
    RADIO_LAST_CALL_FAIL_NETWORK_OUT_OF_ORDER = 38,
    RADIO_LAST_CALL_FAIL_TEMPORARY_FAILURE = 41,
    RADIO_LAST_CALL_FAIL_SWITCHING_EQUIPMENT_CONGESTION = 42,
    RADIO_LAST_CALL_FAIL_ACCESS_INFORMATION_DISCARDED = 43,
    RADIO_LAST_CALL_FAIL_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE = 44,
    RADIO_LAST_CALL_FAIL_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED = 47,
    RADIO_LAST_CALL_FAIL_QOS_UNAVAILABLE = 49,
    RADIO_LAST_CALL_FAIL_REQUESTED_FACILITY_NOT_SUBSCRIBED = 50,
    RADIO_LAST_CALL_FAIL_INCOMING_CALLS_BARRED_WITHIN_CUG = 55,
    RADIO_LAST_CALL_FAIL_BEARER_CAPABILITY_NOT_AUTHORIZED = 57,
    RADIO_LAST_CALL_FAIL_BEARER_CAPABILITY_UNAVAILABLE = 58,
    RADIO_LAST_CALL_FAIL_SERVICE_OPTION_NOT_AVAILABLE = 63,
    RADIO_LAST_CALL_FAIL_BEARER_SERVICE_NOT_IMPLEMENTED = 65,
    RADIO_LAST_CALL_FAIL_ACM_LIMIT_EXCEEDED = 68,
    RADIO_LAST_CALL_FAIL_REQUESTED_FACILITY_NOT_IMPLEMENTED = 69,
    RADIO_LAST_CALL_FAIL_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE = 70,
    RADIO_LAST_CALL_FAIL_SERVICE_OR_OPTION_NOT_IMPLEMENTED = 79,
    RADIO_LAST_CALL_FAIL_INVALID_TRANSACTION_IDENTIFIER = 81,
    RADIO_LAST_CALL_FAIL_USER_NOT_MEMBER_OF_CUG = 87,
    RADIO_LAST_CALL_FAIL_INCOMPATIBLE_DESTINATION = 88,
    RADIO_LAST_CALL_FAIL_INVALID_TRANSIT_NW_SELECTION = 91,
    RADIO_LAST_CALL_FAIL_SEMANTICALLY_INCORRECT_MESSAGE = 95,
    RADIO_LAST_CALL_FAIL_INVALID_MANDATORY_INFORMATION = 96,
    RADIO_LAST_CALL_FAIL_MESSAGE_TYPE_NON_IMPLEMENTED = 97,
    RADIO_LAST_CALL_FAIL_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 98,
    RADIO_LAST_CALL_FAIL_INFORMATION_ELEMENT_NON_EXISTENT = 99,
    RADIO_LAST_CALL_FAIL_CONDITIONAL_IE_ERROR = 100,
    RADIO_LAST_CALL_FAIL_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 101,
    RADIO_LAST_CALL_FAIL_RECOVERY_ON_TIMER_EXPIRED = 102,
    RADIO_LAST_CALL_FAIL_PROTOCOL_ERROR_UNSPECIFIED = 111,
    RADIO_LAST_CALL_FAIL_INTERWORKING_UNSPECIFIED = 127,
    RADIO_LAST_CALL_FAIL_CALL_BARRED = 240,
    RADIO_LAST_CALL_FAIL_FDN_BLOCKED = 241,
    RADIO_LAST_CALL_FAIL_IMSI_UNKNOWN_IN_VLR = 242,
    RADIO_LAST_CALL_FAIL_IMEI_NOT_ACCEPTED = 243,
    RADIO_LAST_CALL_FAIL_DIAL_MODIFIED_TO_USSD = 244,
    RADIO_LAST_CALL_FAIL_DIAL_MODIFIED_TO_SS = 245,
    RADIO_LAST_CALL_FAIL_DIAL_MODIFIED_TO_DIAL = 246,
    RADIO_LAST_CALL_FAIL_RADIO_OFF = 247,
    RADIO_LAST_CALL_FAIL_OUT_OF_SERVICE = 248,
    RADIO_LAST_CALL_FAIL_NO_VALID_SIM = 249,
    RADIO_LAST_CALL_FAIL_RADIO_INTERNAL_ERROR = 250,
    RADIO_LAST_CALL_FAIL_NETWORK_RESP_TIMEOUT = 251,
    RADIO_LAST_CALL_FAIL_NETWORK_REJECT = 252,
    RADIO_LAST_CALL_FAIL_RADIO_ACCESS_FAILURE = 253,
    RADIO_LAST_CALL_FAIL_RADIO_LINK_FAILURE = 254,
    RADIO_LAST_CALL_FAIL_RADIO_LINK_LOST = 255,
    RADIO_LAST_CALL_FAIL_RADIO_UPLINK_FAILURE = 256,
    RADIO_LAST_CALL_FAIL_RADIO_SETUP_FAILURE = 257,
    RADIO_LAST_CALL_FAIL_RADIO_RELEASE_NORMAL = 258,
    RADIO_LAST_CALL_FAIL_RADIO_RELEASE_ABNORMAL = 259,
    RADIO_LAST_CALL_FAIL_ACCESS_CLASS_BLOCKED = 260,
    RADIO_LAST_CALL_FAIL_NETWORK_DETACH = 261,
    RADIO_LAST_CALL_FAIL_CDMA_LOCKED_UNTIL_POWER_CYCLE = 1000,
    RADIO_LAST_CALL_FAIL_CDMA_DROP = 1001,
    RADIO_LAST_CALL_FAIL_CDMA_INTERCEPT = 1002,
    RADIO_LAST_CALL_FAIL_CDMA_REORDER = 1003,
    RADIO_LAST_CALL_FAIL_CDMA_SO_REJECT = 1004,
    RADIO_LAST_CALL_FAIL_CDMA_RETRY_ORDER = 1005,
    RADIO_LAST_CALL_FAIL_CDMA_ACCESS_FAILURE = 1006,
    RADIO_LAST_CALL_FAIL_CDMA_PREEMPTED = 1007,
    RADIO_LAST_CALL_FAIL_CDMA_NOT_EMERGENCY = 1008,
    RADIO_LAST_CALL_FAIL_CDMA_ACCESS_BLOCKED = 1009,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_1 = 0xf001,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_2 = 0xf002,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_3 = 0xf003,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_4 = 0xf004,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_5 = 0xf005,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_6 = 0xf006,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_7 = 0xf007,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_8 = 0xf008,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_9 = 0xf009,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_10 = 0xf00a,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_11 = 0xf00b,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_12 = 0xf00c,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_13 = 0xf00d,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_14 = 0xf00e,
    RADIO_LAST_CALL_FAIL_OEM_CAUSE_15 = 0xf00f,
    RADIO_LAST_CALL_FAIL_ERROR_UNSPECIFIED = 0xffff
} RADIO_LAST_CALL_FAIL_CAUSE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_LAST_CALL_FAIL_CAUSE) == 4);

typedef enum radio_data_call_fail_cause {
    RADIO_DATA_CALL_FAIL_NONE = 0,
    RADIO_DATA_CALL_FAIL_OPERATOR_BARRED = 0x08,
    RADIO_DATA_CALL_FAIL_NAS_SIGNALLING = 0x0E,
    RADIO_DATA_CALL_FAIL_LLC_SNDCP = 0x19,
    RADIO_DATA_CALL_FAIL_INSUFFICIENT_RESOURCES = 0x1A,
    RADIO_DATA_CALL_FAIL_MISSING_UKNOWN_APN = 0x1B,
    RADIO_DATA_CALL_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 0x1C,
    RADIO_DATA_CALL_FAIL_USER_AUTHENTICATION = 0x1D,
    RADIO_DATA_CALL_FAIL_ACTIVATION_REJECT_GGSN = 0x1E,
    RADIO_DATA_CALL_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 0x1F,
    RADIO_DATA_CALL_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 0x20,
    RADIO_DATA_CALL_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 0x21,
    RADIO_DATA_CALL_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 0x22,
    RADIO_DATA_CALL_FAIL_NSAPI_IN_USE = 0x23,
    RADIO_DATA_CALL_FAIL_REGULAR_DEACTIVATION = 0x24,
    RADIO_DATA_CALL_FAIL_QOS_NOT_ACCEPTED = 0x25,
    RADIO_DATA_CALL_FAIL_NETWORK_FAILURE = 0x26,
    RADIO_DATA_CALL_FAIL_UMTS_REACTIVATION_REQ = 0x27,
    RADIO_DATA_CALL_FAIL_FEATURE_NOT_SUPP = 0x28,
    RADIO_DATA_CALL_FAIL_TFT_SEMANTIC_ERROR = 0x29,
    RADIO_DATA_CALL_FAIL_TFT_SYTAX_ERROR = 0x2A,
    RADIO_DATA_CALL_FAIL_UNKNOWN_PDP_CONTEXT = 0x2B,
    RADIO_DATA_CALL_FAIL_FILTER_SEMANTIC_ERROR = 0x2C,
    RADIO_DATA_CALL_FAIL_FILTER_SYTAX_ERROR = 0x2D,
    RADIO_DATA_CALL_FAIL_PDP_WITHOUT_ACTIVE_TFT = 0x2E,
    RADIO_DATA_CALL_FAIL_ACTIVATION_REJECTED_BCM_VIOLATION = 0x30,
    RADIO_DATA_CALL_FAIL_ONLY_IPV4_ALLOWED = 0x32,
    RADIO_DATA_CALL_FAIL_ONLY_IPV6_ALLOWED = 0x33,
    RADIO_DATA_CALL_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 0x34,
    RADIO_DATA_CALL_FAIL_ESM_INFO_NOT_RECEIVED = 0x35,
    RADIO_DATA_CALL_FAIL_PDN_CONN_DOES_NOT_EXIST = 0x36,
    RADIO_DATA_CALL_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 0x37,
    RADIO_DATA_CALL_FAIL_COLLISION_WITH_NETWORK_INITIATED_REQUEST = 0x38,
    RADIO_DATA_CALL_FAIL_ONLY_IPV4V6_ALLOWED = 0x39,
    RADIO_DATA_CALL_FAIL_ONLY_NON_IP_ALLOWED = 0x3A,
    RADIO_DATA_CALL_FAIL_UNSUPPORTED_QCI_VALUE = 0x3B,
    RADIO_DATA_CALL_FAIL_BEARER_HANDLING_NOT_SUPPORTED = 0x3C,
    RADIO_DATA_CALL_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 0x41,
    RADIO_DATA_CALL_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 0x42,
    RADIO_DATA_CALL_FAIL_INVALID_TRANSACTION_ID = 0x51,
    RADIO_DATA_CALL_FAIL_MESSAGE_INCORRECT_SEMANTIC = 0x5F,
    RADIO_DATA_CALL_FAIL_INVALID_MANDATORY_INFO = 0x60,
    RADIO_DATA_CALL_FAIL_MESSAGE_TYPE_UNSUPPORTED = 0x61,
    RADIO_DATA_CALL_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 0x62,
    RADIO_DATA_CALL_FAIL_UNKNOWN_INFO_ELEMENT = 0x63,
    RADIO_DATA_CALL_FAIL_CONDITIONAL_IE_ERROR = 0x64,
    RADIO_DATA_CALL_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 0x65,
    RADIO_DATA_CALL_FAIL_PROTOCOL_ERRORS = 0x6F,
    RADIO_DATA_CALL_FAIL_APN_TYPE_CONFLICT = 0x70,
    RADIO_DATA_CALL_FAIL_INVALID_PCSCF_ADDR = 0x71,
    RADIO_DATA_CALL_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 0x72,
    RADIO_DATA_CALL_FAIL_EMM_ACCESS_BARRED = 0x73,
    RADIO_DATA_CALL_FAIL_EMERGENCY_IFACE_ONLY = 0x74,
    RADIO_DATA_CALL_FAIL_IFACE_MISMATCH = 0x75,
    RADIO_DATA_CALL_FAIL_COMPANION_IFACE_IN_USE = 0x76,
    RADIO_DATA_CALL_FAIL_IP_ADDRESS_MISMATCH = 0x77,
    RADIO_DATA_CALL_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 0x78,
    RADIO_DATA_CALL_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 0x79,
    RADIO_DATA_CALL_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 0x7A,
    RADIO_DATA_CALL_FAIL_INVALID_DNS_ADDR = 0x7B,
    RADIO_DATA_CALL_FAIL_INVALID_PCSCF_OR_DNS_ADDRESS = 0x7C,
    RADIO_DATA_CALL_FAIL_CALL_PREEMPT_BY_EMERGENCY_APN = 0x7F,
    RADIO_DATA_CALL_FAIL_UE_INITIATED_DETACH_OR_DISCONNECT = 0x80,
    RADIO_DATA_CALL_FAIL_MIP_FA_REASON_UNSPECIFIED = 0x7D0,
    RADIO_DATA_CALL_FAIL_MIP_FA_ADMIN_PROHIBITED = 0x7D1,
    RADIO_DATA_CALL_FAIL_MIP_FA_INSUFFICIENT_RESOURCES = 0x7D2,
    RADIO_DATA_CALL_FAIL_MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE = 0x7D3,
    RADIO_DATA_CALL_FAIL_MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE = 0x7D4,
    RADIO_DATA_CALL_FAIL_MIP_FA_REQUESTED_LIFETIME_TOO_LONG = 0x7D5,
    RADIO_DATA_CALL_FAIL_MIP_FA_MALFORMED_REQUEST = 0x7D6,
    RADIO_DATA_CALL_FAIL_MIP_FA_MALFORMED_REPLY = 0x7D7,
    RADIO_DATA_CALL_FAIL_MIP_FA_ENCAPSULATION_UNAVAILABLE = 0x7D8,
    RADIO_DATA_CALL_FAIL_MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE = 0x7D9,
    RADIO_DATA_CALL_FAIL_MIP_FA_REVERSE_TUNNEL_UNAVAILABLE = 0x7DA,
    RADIO_DATA_CALL_FAIL_MIP_FA_REVERSE_TUNNEL_IS_MANDATORY = 0x7DB,
    RADIO_DATA_CALL_FAIL_MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED = 0x7DC,
    RADIO_DATA_CALL_FAIL_MIP_FA_MISSING_NAI = 0x7DD,
    RADIO_DATA_CALL_FAIL_MIP_FA_MISSING_HOME_AGENT = 0x7DE,
    RADIO_DATA_CALL_FAIL_MIP_FA_MISSING_HOME_ADDRESS = 0x7DF,
    RADIO_DATA_CALL_FAIL_MIP_FA_UNKNOWN_CHALLENGE = 0x7E0,
    RADIO_DATA_CALL_FAIL_MIP_FA_MISSING_CHALLENGE = 0x7E1,
    RADIO_DATA_CALL_FAIL_MIP_FA_STALE_CHALLENGE = 0x7E2,
    RADIO_DATA_CALL_FAIL_MIP_HA_REASON_UNSPECIFIED = 0x7E3,
    RADIO_DATA_CALL_FAIL_MIP_HA_ADMIN_PROHIBITED = 0x7E4,
    RADIO_DATA_CALL_FAIL_MIP_HA_INSUFFICIENT_RESOURCES = 0x7E5,
    RADIO_DATA_CALL_FAIL_MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE = 0x7E6,
    RADIO_DATA_CALL_FAIL_MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE = 0x7E7,
    RADIO_DATA_CALL_FAIL_MIP_HA_REGISTRATION_ID_MISMATCH = 0x7E8,
    RADIO_DATA_CALL_FAIL_MIP_HA_MALFORMED_REQUEST = 0x7E9,
    RADIO_DATA_CALL_FAIL_MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS = 0x7EA,
    RADIO_DATA_CALL_FAIL_MIP_HA_REVERSE_TUNNEL_UNAVAILABLE = 0x7EB,
    RADIO_DATA_CALL_FAIL_MIP_HA_REVERSE_TUNNEL_IS_MANDATORY = 0x7EC,
    RADIO_DATA_CALL_FAIL_MIP_HA_ENCAPSULATION_UNAVAILABLE = 0x7ED,
    RADIO_DATA_CALL_FAIL_CLOSE_IN_PROGRESS = 0x7EE,
    RADIO_DATA_CALL_FAIL_NETWORK_INITIATED_TERMINATION = 0x7EF,
    RADIO_DATA_CALL_FAIL_MODEM_APP_PREEMPTED = 0x7F0,
    RADIO_DATA_CALL_FAIL_PDN_IPV4_CALL_DISALLOWED = 0x7F1,
    RADIO_DATA_CALL_FAIL_PDN_IPV4_CALL_THROTTLED = 0x7F2,
    RADIO_DATA_CALL_FAIL_PDN_IPV6_CALL_DISALLOWED = 0x7F3,
    RADIO_DATA_CALL_FAIL_PDN_IPV6_CALL_THROTTLED = 0x7F4,
    RADIO_DATA_CALL_FAIL_MODEM_RESTART = 0x7F5,
    RADIO_DATA_CALL_FAIL_PDP_PPP_NOT_SUPPORTED = 0x7F6,
    RADIO_DATA_CALL_FAIL_UNPREFERRED_RAT = 0x7F7,
    RADIO_DATA_CALL_FAIL_PHYSICAL_LINK_CLOSE_IN_PROGRESS = 0x7F8,
    RADIO_DATA_CALL_FAIL_APN_PENDING_HANDOVER = 0x7F9,
    RADIO_DATA_CALL_FAIL_PROFILE_BEARER_INCOMPATIBLE = 0x7FA,
    RADIO_DATA_CALL_FAIL_SIM_CARD_CHANGED = 0x7FB,
    RADIO_DATA_CALL_FAIL_LOW_POWER_MODE_OR_POWERING_DOWN = 0x7FC,
    RADIO_DATA_CALL_FAIL_APN_DISABLED = 0x7FD,
    RADIO_DATA_CALL_FAIL_MAX_PPP_INACTIVITY_TIMER_EXPIRED = 0x7FE,
    RADIO_DATA_CALL_FAIL_IPV6_ADDRESS_TRANSFER_FAILED = 0x7FF,
    RADIO_DATA_CALL_FAIL_TRAT_SWAP_FAILED = 0x800,
    RADIO_DATA_CALL_FAIL_EHRPD_TO_HRPD_FALLBACK = 0x801,
    RADIO_DATA_CALL_FAIL_MIP_CONFIG_FAILURE = 0x802,
    RADIO_DATA_CALL_FAIL_PDN_INACTIVITY_TIMER_EXPIRED = 0x803,
    RADIO_DATA_CALL_FAIL_MAX_IPV4_CONNECTIONS = 0x804,
    RADIO_DATA_CALL_FAIL_MAX_IPV6_CONNECTIONS = 0x805,
    RADIO_DATA_CALL_FAIL_APN_MISMATCH = 0x806,
    RADIO_DATA_CALL_FAIL_IP_VERSION_MISMATCH = 0x807,
    RADIO_DATA_CALL_FAIL_DUN_CALL_DISALLOWED = 0x808,
    RADIO_DATA_CALL_FAIL_INTERNAL_EPC_NONEPC_TRANSITION = 0x809,
    RADIO_DATA_CALL_FAIL_INTERFACE_IN_USE = 0x80A,
    RADIO_DATA_CALL_FAIL_APN_DISALLOWED_ON_ROAMING = 0x80B,
    RADIO_DATA_CALL_FAIL_APN_PARAMETERS_CHANGED = 0x80C,
    RADIO_DATA_CALL_FAIL_NULL_APN_DISALLOWED = 0x80D,
    RADIO_DATA_CALL_FAIL_THERMAL_MITIGATION = 0x80E,
    RADIO_DATA_CALL_FAIL_DATA_SETTINGS_DISABLED = 0x80F,
    RADIO_DATA_CALL_FAIL_DATA_ROAMING_SETTINGS_DISABLED = 0x810,
    RADIO_DATA_CALL_FAIL_DDS_SWITCHED = 0x811,
    RADIO_DATA_CALL_FAIL_FORBIDDEN_APN_NAME = 0x812,
    RADIO_DATA_CALL_FAIL_DDS_SWITCH_IN_PROGRESS = 0x813,
    RADIO_DATA_CALL_FAIL_CALL_DISALLOWED_IN_ROAMING = 0x814,
    RADIO_DATA_CALL_FAIL_NON_IP_NOT_SUPPORTED = 0x815,
    RADIO_DATA_CALL_FAIL_PDN_NON_IP_CALL_THROTTLED = 0x816,
    RADIO_DATA_CALL_FAIL_PDN_NON_IP_CALL_DISALLOWED = 0x817,
    RADIO_DATA_CALL_FAIL_CDMA_LOCK = 0x818,
    RADIO_DATA_CALL_FAIL_CDMA_INTERCEPT = 0x819,
    RADIO_DATA_CALL_FAIL_CDMA_REORDER = 0x81A,
    RADIO_DATA_CALL_FAIL_CDMA_RELEASE_DUE_TO_SO_REJECTION = 0x81B,
    RADIO_DATA_CALL_FAIL_CDMA_INCOMING_CALL = 0x81C,
    RADIO_DATA_CALL_FAIL_CDMA_ALERT_STOP = 0x81D,
    RADIO_DATA_CALL_FAIL_CHANNEL_ACQUISITION_FAILURE = 0x81E,
    RADIO_DATA_CALL_FAIL_MAX_ACCESS_PROBE = 0x81F,
    RADIO_DATA_CALL_FAIL_CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STA = 0x820,
    RADIO_DATA_CALL_FAIL_NO_RESPONSE_FROM_BASE_STATION = 0x821,
    RADIO_DATA_CALL_FAIL_REJECTED_BY_BASE_STATION = 0x822,
    RADIO_DATA_CALL_FAIL_CONCURRENT_SERVICES_INCOMPATIBLE = 0x823,
    RADIO_DATA_CALL_FAIL_NO_CDMA_SERVICE = 0x824,
    RADIO_DATA_CALL_FAIL_RUIM_NOT_PRESENT = 0x825,
    RADIO_DATA_CALL_FAIL_CDMA_RETRY_ORDER = 0x826,
    RADIO_DATA_CALL_FAIL_ACCESS_BLOCK = 0x827,
    RADIO_DATA_CALL_FAIL_ACCESS_BLOCK_ALL = 0x828,
    RADIO_DATA_CALL_FAIL_IS707B_MAX_ACCESS_PROBES = 0x829,
    RADIO_DATA_CALL_FAIL_THERMAL_EMERGENCY = 0x82A,
    RADIO_DATA_CALL_FAIL_CONCURRENT_SERVICES_NOT_ALLOWED = 0x82B,
    RADIO_DATA_CALL_FAIL_INCOMING_CALL_REJECTED = 0x82C,
    RADIO_DATA_CALL_FAIL_NO_SERVICE_ON_GATEWAY = 0x82D,
    RADIO_DATA_CALL_FAIL_NO_GPRS_CONTEXT = 0x82E,
    RADIO_DATA_CALL_FAIL_ILLEGAL_MS = 0x82F,
    RADIO_DATA_CALL_FAIL_ILLEGAL_ME = 0x830,
    RADIO_DATA_CALL_FAIL_GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED = 0x831,
    RADIO_DATA_CALL_FAIL_GPRS_SERVICES_NOT_ALLOWED = 0x832,
    RADIO_DATA_CALL_FAIL_MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK = 0x833,
    RADIO_DATA_CALL_FAIL_IMPLICITLY_DETACHED = 0x834,
    RADIO_DATA_CALL_FAIL_PLMN_NOT_ALLOWED = 0x835,
    RADIO_DATA_CALL_FAIL_LOCATION_AREA_NOT_ALLOWED = 0x836,
    RADIO_DATA_CALL_FAIL_GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN = 0x837,
    RADIO_DATA_CALL_FAIL_PDP_DUPLICATE = 0x838,
    RADIO_DATA_CALL_FAIL_UE_RAT_CHANGE = 0x839,
    RADIO_DATA_CALL_FAIL_CONGESTION = 0x83A,
    RADIO_DATA_CALL_FAIL_NO_PDP_CONTEXT_ACTIVATED = 0x83B,
    RADIO_DATA_CALL_FAIL_ACCESS_CLASS_DSAC_REJECTION = 0x83C,
    RADIO_DATA_CALL_FAIL_PDP_ACTIVATE_MAX_RETRY_FAILED = 0x83D,
    RADIO_DATA_CALL_FAIL_RADIO_ACCESS_BEARER_FAILURE = 0x83E,
    RADIO_DATA_CALL_FAIL_ESM_UNKNOWN_EPS_BEARER_CONTEXT = 0x83F,
    RADIO_DATA_CALL_FAIL_DRB_RELEASED_BY_RRC = 0x840,
    RADIO_DATA_CALL_FAIL_CONNECTION_RELEASED = 0x841,
    RADIO_DATA_CALL_FAIL_EMM_DETACHED = 0x842,
    RADIO_DATA_CALL_FAIL_EMM_ATTACH_FAILED = 0x843,
    RADIO_DATA_CALL_FAIL_EMM_ATTACH_STARTED = 0x844,
    RADIO_DATA_CALL_FAIL_LTE_NAS_SERVICE_REQUEST_FAILED = 0x845,
    RADIO_DATA_CALL_FAIL_DUPLICATE_BEARER_ID = 0x846,
    RADIO_DATA_CALL_FAIL_ESM_COLLISION_SCENARIOS = 0x847,
    RADIO_DATA_CALL_FAIL_ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK = 0x848,
    RADIO_DATA_CALL_FAIL_ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER = 0x849,
    RADIO_DATA_CALL_FAIL_ESM_BAD_OTA_MESSAGE = 0x84A,
    RADIO_DATA_CALL_FAIL_ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL = 0x84B,
    RADIO_DATA_CALL_FAIL_ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT = 0x84C,
    RADIO_DATA_CALL_FAIL_DS_EXPLICIT_DEACTIVATION = 0x84D,
    RADIO_DATA_CALL_FAIL_ESM_LOCAL_CAUSE_NONE = 0x84E,
    RADIO_DATA_CALL_FAIL_LTE_THROTTLING_NOT_REQUIRED = 0x84F,
    RADIO_DATA_CALL_FAIL_ACCESS_CONTROL_LIST_CHECK_FAILURE = 0x850,
    RADIO_DATA_CALL_FAIL_SERVICE_NOT_ALLOWED_ON_PLMN = 0x851,
    RADIO_DATA_CALL_FAIL_EMM_T3417_EXPIRED = 0x852,
    RADIO_DATA_CALL_FAIL_EMM_T3417_EXT_EXPIRED = 0x853,
    RADIO_DATA_CALL_FAIL_RRC_UPLINK_DATA_TRANSMISSION_FAILURE = 0x854,
    RADIO_DATA_CALL_FAIL_RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER = 0x855,
    RADIO_DATA_CALL_FAIL_RRC_UPLINK_CONNECTION_RELEASE = 0x856,
    RADIO_DATA_CALL_FAIL_RRC_UPLINK_RADIO_LINK_FAILURE = 0x857,
    RADIO_DATA_CALL_FAIL_RRC_UPLINK_ERROR_REQUEST_FROM_NAS = 0x858,
    RADIO_DATA_CALL_FAIL_RRC_CONN_ACCESS_STRATUM_FAILURE = 0x859,
    RADIO_DATA_CALL_FAIL_RRC_CONN_ANOTHER_PROCEDURE_IN_PROGRESS = 0x85A,
    RADIO_DATA_CALL_FAIL_RRC_CONN_ACCESS_BARRED = 0x85B,
    RADIO_DATA_CALL_FAIL_RRC_CONN_CELL_RESELECTION = 0x85C,
    RADIO_DATA_CALL_FAIL_RRC_CONN_CONFIG_FAILURE = 0x85D,
    RADIO_DATA_CALL_FAIL_RRC_CONN_TIMER_EXPIRED = 0x85E,
    RADIO_DATA_CALL_FAIL_RRC_CONN_LINK_FAILURE = 0x85F,
    RADIO_DATA_CALL_FAIL_RRC_CONN_CELL_NOT_CAMPED = 0x860,
    RADIO_DATA_CALL_FAIL_RRC_CONN_SYSTEM_INTERVAL_FAILURE = 0x861,
    RADIO_DATA_CALL_FAIL_RRC_CONN_REJECT_BY_NETWORK = 0x862,
    RADIO_DATA_CALL_FAIL_RRC_CONN_NORMAL_RELEASE = 0x863,
    RADIO_DATA_CALL_FAIL_RRC_CONN_RADIO_LINK_FAILURE = 0x864,
    RADIO_DATA_CALL_FAIL_RRC_CONN_REESTABLISHMENT_FAILURE = 0x865,
    RADIO_DATA_CALL_FAIL_RRC_CONN_OUT_OF_SERVICE_DURING_CELL_REGISTER = 0x866,
    RADIO_DATA_CALL_FAIL_RRC_CONN_ABORT_REQUEST = 0x867,
    RADIO_DATA_CALL_FAIL_RRC_CONN_SYSTEM_INFORMATION_BLOCK_READ_ERROR = 0x868,
    RADIO_DATA_CALL_FAIL_NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH = 0x869,
    RADIO_DATA_CALL_FAIL_NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH = 0x86A,
    RADIO_DATA_CALL_FAIL_ESM_PROCEDURE_TIME_OUT = 0x86B,
    RADIO_DATA_CALL_FAIL_INVALID_CONNECTION_ID = 0x86C,
    RADIO_DATA_CALL_FAIL_MAXIMIUM_NSAPIS_EXCEEDED = 0x86D,
    RADIO_DATA_CALL_FAIL_INVALID_PRIMARY_NSAPI = 0x86E,
    RADIO_DATA_CALL_FAIL_CANNOT_ENCODE_OTA_MESSAGE = 0x86F,
    RADIO_DATA_CALL_FAIL_RADIO_ACCESS_BEARER_SETUP_FAILURE = 0x870,
    RADIO_DATA_CALL_FAIL_PDP_ESTABLISH_TIMEOUT_EXPIRED = 0x871,
    RADIO_DATA_CALL_FAIL_PDP_MODIFY_TIMEOUT_EXPIRED = 0x872,
    RADIO_DATA_CALL_FAIL_PDP_INACTIVE_TIMEOUT_EXPIRED = 0x873,
    RADIO_DATA_CALL_FAIL_PDP_LOWERLAYER_ERROR = 0x874,
    RADIO_DATA_CALL_FAIL_PDP_MODIFY_COLLISION = 0x875,
    RADIO_DATA_CALL_FAIL_MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED = 0x876,
    RADIO_DATA_CALL_FAIL_NAS_REQUEST_REJECTED_BY_NETWORK = 0x877,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_INVALID_REQUEST = 0x878,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_TRACKING_AREA_ID_CHANGED = 0x879,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_RF_UNAVAILABLE = 0x87A,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE = 0x87B,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE = 0x87C,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_ABORTED_AFTER_HANDOVER = 0x87D,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE = 0x87E,
    RADIO_DATA_CALL_FAIL_RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE = 0x87F,
    RADIO_DATA_CALL_FAIL_IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER = 0x880,
    RADIO_DATA_CALL_FAIL_IMEI_NOT_ACCEPTED = 0x881,
    RADIO_DATA_CALL_FAIL_EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED = 0x882,
    RADIO_DATA_CALL_FAIL_EPS_SERVICES_NOT_ALLOWED_IN_PLMN = 0x883,
    RADIO_DATA_CALL_FAIL_MSC_TEMPORARILY_NOT_REACHABLE = 0x884,
    RADIO_DATA_CALL_FAIL_CS_DOMAIN_NOT_AVAILABLE = 0x885,
    RADIO_DATA_CALL_FAIL_ESM_FAILURE = 0x886,
    RADIO_DATA_CALL_FAIL_MAC_FAILURE = 0x887,
    RADIO_DATA_CALL_FAIL_SYNCHRONIZATION_FAILURE = 0x888,
    RADIO_DATA_CALL_FAIL_UE_SECURITY_CAPABILITIES_MISMATCH = 0x889,
    RADIO_DATA_CALL_FAIL_SECURITY_MODE_REJECTED = 0x88A,
    RADIO_DATA_CALL_FAIL_UNACCEPTABLE_NON_EPS_AUTHENTICATION = 0x88B,
    RADIO_DATA_CALL_FAIL_CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED = 0x88C,
    RADIO_DATA_CALL_FAIL_NO_EPS_BEARER_CONTEXT_ACTIVATED = 0x88D,
    RADIO_DATA_CALL_FAIL_INVALID_EMM_STATE = 0x88E,
    RADIO_DATA_CALL_FAIL_NAS_LAYER_FAILURE = 0x88F,
    RADIO_DATA_CALL_FAIL_MULTIPLE_PDP_CALL_NOT_ALLOWED = 0x890,
    RADIO_DATA_CALL_FAIL_EMBMS_NOT_ENABLED = 0x891,
    RADIO_DATA_CALL_FAIL_IRAT_HANDOVER_FAILED = 0x892,
    RADIO_DATA_CALL_FAIL_EMBMS_REGULAR_DEACTIVATION = 0x893,
    RADIO_DATA_CALL_FAIL_TEST_LOOPBACK_REGULAR_DEACTIVATION = 0x894,
    RADIO_DATA_CALL_FAIL_LOWER_LAYER_REGISTRATION_FAILURE = 0x895,
    RADIO_DATA_CALL_FAIL_DATA_PLAN_EXPIRED = 0x896,
    RADIO_DATA_CALL_FAIL_UMTS_HANDOVER_TO_IWLAN = 0x897,
    RADIO_DATA_CALL_FAIL_EVDO_CONN_DENY_BY_GENERAL_OR_NETWORK_BUSY = 0x898,
    RADIO_DATA_CALL_FAIL_EVDO_CONN_DENY_BY_BILLING_OR_AUTH_FAILURE = 0x899,
    RADIO_DATA_CALL_FAIL_EVDO_HDR_CHANGED = 0x89A,
    RADIO_DATA_CALL_FAIL_EVDO_HDR_EXITED = 0x89B,
    RADIO_DATA_CALL_FAIL_EVDO_HDR_NO_SESSION = 0x89C,
    RADIO_DATA_CALL_FAIL_EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL = 0x89D,
    RADIO_DATA_CALL_FAIL_EVDO_HDR_CONNECTION_SETUP_TIMEOUT = 0x89E,
    RADIO_DATA_CALL_FAIL_FAILED_TO_ACQUIRE_COLOCATED_HDR = 0x89F,
    RADIO_DATA_CALL_FAIL_OTASP_COMMIT_IN_PROGRESS = 0x8A0,
    RADIO_DATA_CALL_FAIL_NO_HYBRID_HDR_SERVICE = 0x8A1,
    RADIO_DATA_CALL_FAIL_HDR_NO_LOCK_GRANTED = 0x8A2,
    RADIO_DATA_CALL_FAIL_DBM_OR_SMS_IN_PROGRESS = 0x8A3,
    RADIO_DATA_CALL_FAIL_HDR_FADE = 0x8A4,
    RADIO_DATA_CALL_FAIL_HDR_ACCESS_FAILURE = 0x8A5,
    RADIO_DATA_CALL_FAIL_UNSUPPORTED_1X_PREV = 0x8A6,
    RADIO_DATA_CALL_FAIL_LOCAL_END = 0x8A7,
    RADIO_DATA_CALL_FAIL_NO_SERVICE = 0x8A8,
    RADIO_DATA_CALL_FAIL_FADE = 0x8A9,
    RADIO_DATA_CALL_FAIL_NORMAL_RELEASE = 0x8AA,
    RADIO_DATA_CALL_FAIL_ACCESS_ATTEMPT_ALREADY_IN_PROGRESS = 0x8AB,
    RADIO_DATA_CALL_FAIL_REDIRECTION_OR_HANDOFF_IN_PROGRESS = 0x8AC,
    RADIO_DATA_CALL_FAIL_EMERGENCY_MODE = 0x8AD,
    RADIO_DATA_CALL_FAIL_PHONE_IN_USE = 0x8AE,
    RADIO_DATA_CALL_FAIL_INVALID_MODE = 0x8AF,
    RADIO_DATA_CALL_FAIL_INVALID_SIM_STATE = 0x8B0,
    RADIO_DATA_CALL_FAIL_NO_COLLOCATED_HDR = 0x8B1,
    RADIO_DATA_CALL_FAIL_UE_IS_ENTERING_POWERSAVE_MODE = 0x8B2,
    RADIO_DATA_CALL_FAIL_DUAL_SWITCH = 0x8B3,
    RADIO_DATA_CALL_FAIL_PPP_TIMEOUT = 0x8B4,
    RADIO_DATA_CALL_FAIL_PPP_AUTH_FAILURE = 0x8B5,
    RADIO_DATA_CALL_FAIL_PPP_OPTION_MISMATCH = 0x8B6,
    RADIO_DATA_CALL_FAIL_PPP_PAP_FAILURE = 0x8B7,
    RADIO_DATA_CALL_FAIL_PPP_CHAP_FAILURE = 0x8B8,
    RADIO_DATA_CALL_FAIL_PPP_CLOSE_IN_PROGRESS = 0x8B9,
    RADIO_DATA_CALL_FAIL_LIMITED_TO_IPV4 = 0x8BA,
    RADIO_DATA_CALL_FAIL_LIMITED_TO_IPV6 = 0x8BB,
    RADIO_DATA_CALL_FAIL_VSNCP_TIMEOUT = 0x8BC,
    RADIO_DATA_CALL_FAIL_VSNCP_GEN_ERROR = 0x8BD,
    RADIO_DATA_CALL_FAIL_VSNCP_APN_UNATHORIZED = 0x8BE,
    RADIO_DATA_CALL_FAIL_VSNCP_PDN_LIMIT_EXCEEDED = 0x8BF,
    RADIO_DATA_CALL_FAIL_VSNCP_NO_PDN_GATEWAY_ADDRESS = 0x8C0,
    RADIO_DATA_CALL_FAIL_VSNCP_PDN_GATEWAY_UNREACHABLE = 0x8C1,
    RADIO_DATA_CALL_FAIL_VSNCP_PDN_GATEWAY_REJECT = 0x8C2,
    RADIO_DATA_CALL_FAIL_VSNCP_INSUFFICIENT_PARAMETERS = 0x8C3,
    RADIO_DATA_CALL_FAIL_VSNCP_RESOURCE_UNAVAILABLE = 0x8C4,
    RADIO_DATA_CALL_FAIL_VSNCP_ADMINISTRATIVELY_PROHIBITED = 0x8C5,
    RADIO_DATA_CALL_FAIL_VSNCP_PDN_ID_IN_USE = 0x8C6,
    RADIO_DATA_CALL_FAIL_VSNCP_SUBSCRIBER_LIMITATION = 0x8C7,
    RADIO_DATA_CALL_FAIL_VSNCP_PDN_EXISTS_FOR_THIS_APN = 0x8C8,
    RADIO_DATA_CALL_FAIL_VSNCP_RECONNECT_NOT_ALLOWED = 0x8C9,
    RADIO_DATA_CALL_FAIL_IPV6_PREFIX_UNAVAILABLE = 0x8CA,
    RADIO_DATA_CALL_FAIL_HANDOFF_PREFERENCE_CHANGED = 0x8CB,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_1 = 0x1001,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_2 = 0x1002,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_3 = 0x1003,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_4 = 0x1004,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_5 = 0x1005,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_6 = 0x1006,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_7 = 0x1007,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_8 = 0x1008,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_9 = 0x1009,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_10 = 0x100A,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_11 = 0x100B,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_12 = 0x100C,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_13 = 0x100D,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_14 = 0x100E,
    RADIO_DATA_CALL_FAIL_OEM_DCFAILCAUSE_15 = 0x100F,
    RADIO_DATA_CALL_FAIL_VOICE_REGISTRATION_FAIL = -1,
    RADIO_DATA_CALL_FAIL_DATA_REGISTRATION_FAIL = -2,
    RADIO_DATA_CALL_FAIL_SIGNAL_LOST = -3,
    RADIO_DATA_CALL_FAIL_PREF_RADIO_TECH_CHANGED = -4,
    RADIO_DATA_CALL_FAIL_RADIO_POWER_OFF = -5,
    RADIO_DATA_CALL_FAIL_TETHERED_CALL_ACTIVE = -6,
    RADIO_DATA_CALL_FAIL_UNSPECIFIED = 0xffff
} RADIO_DATA_CALL_FAIL_CAUSE; /* Since 1.4.3 */
G_STATIC_ASSERT(sizeof(RADIO_DATA_CALL_FAIL_CAUSE) == 4);

typedef struct radio_response_info {
    RADIO_RESP_TYPE type RADIO_ALIGNED(4);
    guint32 serial RADIO_ALIGNED(4);
    RADIO_ERROR error RADIO_ALIGNED(4);
} RadioResponseInfo;
G_STATIC_ASSERT(sizeof(RadioResponseInfo) == 12);

typedef struct radio_card_status {
    RADIO_CARD_STATE cardState RADIO_ALIGNED(4);
    RADIO_PIN_STATE universalPinState RADIO_ALIGNED(4);
    gint32 gsmUmtsSubscriptionAppIndex RADIO_ALIGNED(4);
    gint32 cdmaSubscriptionAppIndex RADIO_ALIGNED(4);
    gint32 imsSubscriptionAppIndex RADIO_ALIGNED(4);
    GBinderHidlVec apps RADIO_ALIGNED(8); /* vec<RadioAppStatus> */
} RADIO_ALIGNED(8) RadioCardStatus;
G_STATIC_ASSERT(sizeof(RadioCardStatus) == 40);

typedef struct radio_card_status_1_2 {
    RadioCardStatus base RADIO_ALIGNED(8);
    gint32 physicalSlotId RADIO_ALIGNED(4);
    GBinderHidlString atr RADIO_ALIGNED(8);
    GBinderHidlString iccid RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCardStatus_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCardStatus_1_2) == 80);

typedef struct radio_card_status_1_4 {
    RadioCardStatus base RADIO_ALIGNED(8);
    gint32 physicalSlotId RADIO_ALIGNED(4);
    GBinderHidlString atr RADIO_ALIGNED(8);
    GBinderHidlString iccid RADIO_ALIGNED(8);
    GBinderHidlString eid RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCardStatus_1_4; /* Since 1.4.0 */
G_STATIC_ASSERT(sizeof(RadioCardStatus_1_4) == 96);

typedef struct radio_card_status_1_5 {
    RadioCardStatus_1_4 base RADIO_ALIGNED(8);
    GBinderHidlVec applications RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCardStatus_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCardStatus_1_5) == 112);

typedef struct radio_app_status {
    RADIO_APP_TYPE appType RADIO_ALIGNED(4);
    RADIO_APP_STATE appState RADIO_ALIGNED(4);
    RADIO_PERSO_SUBSTATE persoSubstate RADIO_ALIGNED(4);
    GBinderHidlString aid RADIO_ALIGNED(8);
    GBinderHidlString label RADIO_ALIGNED(8);
    gint32 pinReplaced RADIO_ALIGNED(4);
    RADIO_PIN_STATE pin1 RADIO_ALIGNED(4);
    RADIO_PIN_STATE pin2 RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioAppStatus;
G_STATIC_ASSERT(sizeof(RadioAppStatus) == 64);

typedef struct radio_app_status_1_5 {
    RadioAppStatus base RADIO_ALIGNED(8);
    RADIO_PERSO_SUBSTATE persoSubstate RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioAppStatus_1_5; /* Since 1.5.5 */
G_STATIC_ASSERT(sizeof(RadioAppStatus_1_5) == 72);

typedef struct radio_uus_info {
    gint32 uusType RADIO_ALIGNED(4);
    gint32 uusDcs RADIO_ALIGNED(4);
    GBinderHidlString uusData RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioUusInfo;
G_STATIC_ASSERT(sizeof(RadioUusInfo) == 24);

typedef struct radio_call {
    RADIO_CALL_STATE state RADIO_ALIGNED(4);
    gint32 index RADIO_ALIGNED(4);
    gint32 toa RADIO_ALIGNED(4);
    guint8 isMpty RADIO_ALIGNED(1);
    guint8 isMT RADIO_ALIGNED(1);
    guint8 als RADIO_ALIGNED(1);
    guint8 isVoice RADIO_ALIGNED(1);
    guint8 isVoicePrivacy RADIO_ALIGNED(1);
    GBinderHidlString number RADIO_ALIGNED(8);
    gint32 numberPresentation RADIO_ALIGNED(4);
    GBinderHidlString name RADIO_ALIGNED(8);
    gint32 namePresentation RADIO_ALIGNED(4);
    GBinderHidlVec uusInfo RADIO_ALIGNED(8); /* vec<RadioUusInfo> */
} RADIO_ALIGNED(8) RadioCall;
G_STATIC_ASSERT(sizeof(RadioCall) == 88);

typedef struct radio_call_1_2 {
    RadioCall base RADIO_ALIGNED(8);
    gint32 audioQuality RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCall_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCall_1_2) == 96);

typedef struct radio_dial {
    GBinderHidlString address RADIO_ALIGNED(8);
    RADIO_CLIR clir RADIO_ALIGNED(4);
    GBinderHidlVec uusInfo RADIO_ALIGNED(8); /* vec<RadioUusInfo> */
} RADIO_ALIGNED(8) RadioDial;
G_STATIC_ASSERT(sizeof(RadioDial) == 40);

typedef struct radio_last_call_fail_cause_info {
    RADIO_LAST_CALL_FAIL_CAUSE causeCode RADIO_ALIGNED(4);
    GBinderHidlString vendorCause RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioLastCallFailCauseInfo;
G_STATIC_ASSERT(sizeof(RadioLastCallFailCauseInfo) == 24);

typedef struct radio_operator_info {
    GBinderHidlString alphaLong RADIO_ALIGNED(8);
    GBinderHidlString alphaShort RADIO_ALIGNED(8);
    GBinderHidlString operatorNumeric RADIO_ALIGNED(8);
    RADIO_OP_STATUS status RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioOperatorInfo;
G_STATIC_ASSERT(sizeof(RadioOperatorInfo) == 56);

typedef struct radio_data_profile {
    RADIO_DATA_PROFILE_ID profileId RADIO_ALIGNED(4);
    GBinderHidlString apn RADIO_ALIGNED(8);
    GBinderHidlString protocol RADIO_ALIGNED(8);
    GBinderHidlString roamingProtocol RADIO_ALIGNED(8);
    RADIO_APN_AUTH_TYPE authType RADIO_ALIGNED(4);
    GBinderHidlString user RADIO_ALIGNED(8);
    GBinderHidlString password RADIO_ALIGNED(8);
    RADIO_DATA_PROFILE_TYPE type RADIO_ALIGNED(4);
    gint32 maxConnsTime RADIO_ALIGNED(4);
    gint32 maxConns RADIO_ALIGNED(4);
    gint32 waitTime RADIO_ALIGNED(4);
    guint8 enabled RADIO_ALIGNED(1);
    RADIO_APN_TYPES supportedApnTypesBitmap RADIO_ALIGNED(4);
    RADIO_ACCESS_FAMILY bearerBitmap RADIO_ALIGNED(4);
    gint32 mtu RADIO_ALIGNED(4);
    gint32 mvnoType RADIO_ALIGNED(4);
    GBinderHidlString mvnoMatchData RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioDataProfile;
G_STATIC_ASSERT(sizeof(RadioDataProfile) == 152);

typedef struct radio_data_profile_1_4 {
    RADIO_DATA_PROFILE_ID profileId RADIO_ALIGNED(4);
    GBinderHidlString apn RADIO_ALIGNED(8);
    RADIO_PDP_PROTOCOL_TYPE protocol RADIO_ALIGNED(4);
    RADIO_PDP_PROTOCOL_TYPE roamingProtocol RADIO_ALIGNED(4);
    RADIO_APN_AUTH_TYPE authType RADIO_ALIGNED(4);
    GBinderHidlString user RADIO_ALIGNED(8);
    GBinderHidlString password RADIO_ALIGNED(8);
    RADIO_DATA_PROFILE_TYPE type RADIO_ALIGNED(4);
    gint32 maxConnsTime RADIO_ALIGNED(4);
    gint32 maxConns RADIO_ALIGNED(4);
    gint32 waitTime RADIO_ALIGNED(4);
    guint8 enabled RADIO_ALIGNED(1);
    RADIO_APN_TYPES supportedApnTypesBitmap RADIO_ALIGNED(4);
    RADIO_ACCESS_FAMILY bearerBitmap RADIO_ALIGNED(4);
    gint32 mtu RADIO_ALIGNED(4);
    guint8 preferred RADIO_ALIGNED(1);
    guint8 persistent RADIO_ALIGNED(1);
} RADIO_ALIGNED(8) RadioDataProfile_1_4; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioDataProfile_1_4) == 112);

typedef struct radio_data_profile_1_5 {
    RADIO_DATA_PROFILE_ID profileId RADIO_ALIGNED(4);
    GBinderHidlString apn RADIO_ALIGNED(8);
    RADIO_PDP_PROTOCOL_TYPE protocol RADIO_ALIGNED(4);
    RADIO_PDP_PROTOCOL_TYPE roamingProtocol RADIO_ALIGNED(4);
    RADIO_APN_AUTH_TYPE authType RADIO_ALIGNED(4);
    GBinderHidlString user RADIO_ALIGNED(8);
    GBinderHidlString password RADIO_ALIGNED(8);
    RADIO_DATA_PROFILE_TYPE type RADIO_ALIGNED(4);
    gint32 maxConnsTime RADIO_ALIGNED(4);
    gint32 maxConns RADIO_ALIGNED(4);
    gint32 waitTime RADIO_ALIGNED(4);
    guint8 enabled RADIO_ALIGNED(1);
    RADIO_APN_TYPES supportedApnTypesBitmap RADIO_ALIGNED(4);
    RADIO_ACCESS_FAMILY bearerBitmap RADIO_ALIGNED(4);
    gint32 mtuV4 RADIO_ALIGNED(4);
    gint32 mtuV6 RADIO_ALIGNED(4);
    guint8 preferred RADIO_ALIGNED(1);
    guint8 persistent RADIO_ALIGNED(1);
} RADIO_ALIGNED(8) RadioDataProfile_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioDataProfile_1_5) == 112);

typedef struct radio_data_call {
    RADIO_DATA_CALL_FAIL_CAUSE status RADIO_ALIGNED(4);
    gint32 suggestedRetryTime RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    RADIO_DATA_CALL_ACTIVE_STATUS active RADIO_ALIGNED(4);
    GBinderHidlString type RADIO_ALIGNED(8);
    GBinderHidlString ifname RADIO_ALIGNED(8);
    GBinderHidlString addresses RADIO_ALIGNED(8);
    GBinderHidlString dnses RADIO_ALIGNED(8);
    GBinderHidlString gateways RADIO_ALIGNED(8);
    GBinderHidlString pcscf RADIO_ALIGNED(8);
    gint32 mtu RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioDataCall;
G_STATIC_ASSERT(sizeof(RadioDataCall) == 120);

typedef struct radio_data_call_1_4 {
    RADIO_DATA_CALL_FAIL_CAUSE cause RADIO_ALIGNED(4);
    gint32 suggestedRetryTime RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    RADIO_DATA_CALL_ACTIVE_STATUS active RADIO_ALIGNED(4);
    RADIO_PDP_PROTOCOL_TYPE type RADIO_ALIGNED(4);
    GBinderHidlString ifname RADIO_ALIGNED(8);
    GBinderHidlVec addresses RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    GBinderHidlVec dnses RADIO_ALIGNED(8);     /* vec<GBinderHidlString> */
    GBinderHidlVec gateways RADIO_ALIGNED(8);  /* vec<GBinderHidlString> */
    GBinderHidlVec pcscf RADIO_ALIGNED(8);     /* vec<GBinderHidlString> */
    gint32 mtu RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioDataCall_1_4; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioDataCall_1_4) == 112);

typedef struct radio_link_address {
    GBinderHidlString address RADIO_ALIGNED(8);
    gint32 properties RADIO_ALIGNED(4);
    guint64 deprecationTime RADIO_ALIGNED(8);
    guint64 expirationTime RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioLinkAddress; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioLinkAddress) == 40);

typedef struct radio_data_call_1_5 {
    RADIO_DATA_CALL_FAIL_CAUSE cause RADIO_ALIGNED(4);
    gint32 suggestedRetryTime RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    RADIO_DATA_CALL_ACTIVE_STATUS active RADIO_ALIGNED(4);
    RADIO_PDP_PROTOCOL_TYPE type RADIO_ALIGNED(4);
    GBinderHidlString ifname RADIO_ALIGNED(8);
    GBinderHidlVec addresses RADIO_ALIGNED(8); /* vec<RadioLinkAddress> */
    GBinderHidlVec dnses RADIO_ALIGNED(8);     /* vec<GBinderHidlString> */
    GBinderHidlVec gateways RADIO_ALIGNED(8);  /* vec<GBinderHidlString> */
    GBinderHidlVec pcscf RADIO_ALIGNED(8);     /* vec<GBinderHidlString> */
    gint32 mtuV4 RADIO_ALIGNED(4);
    gint32 mtuV6 RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioDataCall_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioDataCall_1_5) == 112);

typedef struct radio_sms_write_args {
    gint32 status RADIO_ALIGNED(4);
    GBinderHidlString pdu RADIO_ALIGNED(8);
    GBinderHidlString smsc RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioSmsWriteArgs;
G_STATIC_ASSERT(sizeof(RadioSmsWriteArgs) == 40);

typedef struct radio_gsm_sms_message {
    GBinderHidlString smscPdu RADIO_ALIGNED(8);
    GBinderHidlString pdu RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioGsmSmsMessage;
G_STATIC_ASSERT(sizeof(RadioGsmSmsMessage) == 32);

typedef struct radio_send_sms_result {
    gint32 messageRef RADIO_ALIGNED(4);
    GBinderHidlString ackPDU RADIO_ALIGNED(8);
    gint32 errorCode RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioSendSmsResult;
G_STATIC_ASSERT(sizeof(RadioSendSmsResult) == 32);

typedef struct radio_ims_sms_message {
    RADIO_TECH_FAMILY tech RADIO_ALIGNED(4);
    gboolean retry RADIO_ALIGNED(1);
    gint32 messageRef RADIO_ALIGNED(4);
    GBinderHidlVec cdmaMessage RADIO_ALIGNED(8); /* vec<CdmaSmsMessage> */
    GBinderHidlVec gsmMessage RADIO_ALIGNED(8);  /* vec<RadioGsmSmsMessage> */
} RADIO_ALIGNED(8) RadioImsSmsMessage; /* Since 1.4.9 */
G_STATIC_ASSERT(sizeof(RadioImsSmsMessage) == 48);

typedef struct radio_icc_io {
    gint32 command RADIO_ALIGNED(4);
    gint32 fileId RADIO_ALIGNED(4);
    GBinderHidlString path RADIO_ALIGNED(8);
    gint32 p1 RADIO_ALIGNED(4);
    gint32 p2 RADIO_ALIGNED(4);
    gint32 p3 RADIO_ALIGNED(4);
    GBinderHidlString data RADIO_ALIGNED(8);
    GBinderHidlString pin2 RADIO_ALIGNED(8);
    GBinderHidlString aid RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioIccIo;
G_STATIC_ASSERT(sizeof(RadioIccIo) == 88);

typedef struct radio_sim_apdu {
    gint32 sessionId RADIO_ALIGNED(4);
    gint32 cla RADIO_ALIGNED(4);
    gint32 instruction RADIO_ALIGNED(4);
    gint32 p1 RADIO_ALIGNED(4);
    gint32 p2 RADIO_ALIGNED(4);
    gint32 p3 RADIO_ALIGNED(4);
    GBinderHidlString data RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioSimApdu;
G_STATIC_ASSERT(sizeof(RadioSimApdu) == 40); /* Since 1.2.6 */

typedef struct radio_icc_io_result {
    gint32 sw1 RADIO_ALIGNED(4);
    gint32 sw2 RADIO_ALIGNED(4);
    GBinderHidlString response RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioIccIoResult;
G_STATIC_ASSERT(sizeof(RadioIccIoResult) == 24);

typedef struct radio_call_forward_info {
    RADIO_CALL_FORWARD status RADIO_ALIGNED(4);
    gint32 reason RADIO_ALIGNED(4);
    gint32 serviceClass RADIO_ALIGNED(4);
    gint32 toa RADIO_ALIGNED(4);
    GBinderHidlString number RADIO_ALIGNED(8);
    gint32 timeSeconds RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCallForwardInfo;
G_STATIC_ASSERT(sizeof(RadioCallForwardInfo) == 40);

typedef struct radio_emergency_number {
    GBinderHidlString number RADIO_ALIGNED(8);
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    RADIO_EMERGENCY_SERVICE_CATEGORY categories RADIO_ALIGNED(4);
    GBinderHidlVec urns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    RADIO_EMERGENCY_NUMBER_SOURCE sources RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioEmergencyNumber; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioEmergencyNumber) == 80);

#define RADIO_CELL_INVALID_VALUE (INT_MAX)

typedef struct radio_cell_identity {
    RADIO_CELL_INFO_TYPE cellInfoType RADIO_ALIGNED(4);
    GBinderHidlVec gsm RADIO_ALIGNED(8);     /* vec<RadioCellIdentityGsm> */
    GBinderHidlVec wcdma RADIO_ALIGNED(8);   /* vec<RadioCellIdentityWcdma> */
    GBinderHidlVec cdma RADIO_ALIGNED(8);    /* vec<RadioCellIdentityCdma> */
    GBinderHidlVec lte RADIO_ALIGNED(8);     /* vec<RadioCellIdentityLte> */
    GBinderHidlVec tdscdma RADIO_ALIGNED(8); /* vec<RadioCellIdentityTdscdma> */
} RADIO_ALIGNED(8) RadioCellIdentity;
G_STATIC_ASSERT(sizeof(RadioCellIdentity) == 88);

typedef struct radio_cell_identity_1_2 {
    RADIO_CELL_INFO_TYPE cellInfoType RADIO_ALIGNED(4);
    GBinderHidlVec gsm RADIO_ALIGNED(8);   /* vec<RadioCellIdentityGsm_1_2> */
    GBinderHidlVec wcdma RADIO_ALIGNED(8); /* vec<RadioCellIdentityWcdma_1_2> */
    GBinderHidlVec cdma RADIO_ALIGNED(8);  /* vec<RadioCellIdentityCdma_1_2> */
    GBinderHidlVec lte RADIO_ALIGNED(8);   /* vec<RadioCellIdentityLte_1_2> */
    GBinderHidlVec tdscdma RADIO_ALIGNED(8);/*vec<RadioCellIdentityTdscdma_1_2>*/
} RADIO_ALIGNED(8) RadioCellIdentity_1_2;  /* Since 1.2.4 */
G_STATIC_ASSERT(sizeof(RadioCellIdentity_1_2) == 88);

typedef struct radio_cell_info {
    RADIO_CELL_INFO_TYPE cellInfoType RADIO_ALIGNED(4);
    guint8 registered RADIO_ALIGNED(1);
    gint32 timeStampType RADIO_ALIGNED(4);
    guint64 timeStamp RADIO_ALIGNED(8);
    GBinderHidlVec gsm RADIO_ALIGNED(8);     /* vec<RadioCellInfoGsm> */
    GBinderHidlVec cdma RADIO_ALIGNED(8);    /* vec<RadioCellInfoCdma> */
    GBinderHidlVec lte RADIO_ALIGNED(8);     /* vec<RadioCellInfoLte> */
    GBinderHidlVec wcdma RADIO_ALIGNED(8);   /* vec<RadioCellInfoWcdma> */
    GBinderHidlVec tdscdma RADIO_ALIGNED(8); /* vec<RadioCellInfoTdscdma> */
} RADIO_ALIGNED(8) RadioCellInfo;
G_STATIC_ASSERT(sizeof(RadioCellInfo) == 104);

typedef struct radio_cell_info_1_2 {
    RADIO_CELL_INFO_TYPE cellInfoType RADIO_ALIGNED(4);
    guint8 registered RADIO_ALIGNED(1);
    gint32 timeStampType RADIO_ALIGNED(4);
    guint64 timeStamp RADIO_ALIGNED(8);
    GBinderHidlVec gsm RADIO_ALIGNED(8);     /* vec<RadioCellInfoGsm_1_2> */
    GBinderHidlVec cdma RADIO_ALIGNED(8);    /* vec<RadioCellInfoCdma_1_2> */
    GBinderHidlVec lte RADIO_ALIGNED(8);     /* vec<RadioCellInfoLte_1_2> */
    GBinderHidlVec wcdma RADIO_ALIGNED(8);   /* vec<RadioCellInfoWcdma_1_2> */
    GBinderHidlVec tdscdma RADIO_ALIGNED(8); /* vec<RadioCellInfoTdscdma_1_2> */
    RADIO_CELL_CONNECTION_STATUS connectionStatus RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfo_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfo_1_2) == 112);

typedef struct radio_cell_identity_operator_names {
    GBinderHidlString alphaLong RADIO_ALIGNED(8);
    GBinderHidlString alphaShort RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityOperatorNames; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityOperatorNames) == 32);

typedef struct radio_cell_identity_gsm {
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    gint32 lac RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    gint32 arfcn RADIO_ALIGNED(4);
    guint8 bsic RADIO_ALIGNED(1);
} RADIO_ALIGNED(8) RadioCellIdentityGsm;
G_STATIC_ASSERT(sizeof(RadioCellIdentityGsm) == 48);

typedef struct radio_cell_identity_gsm_1_2 {
    RadioCellIdentityGsm base RADIO_ALIGNED(8);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityGsm_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityGsm_1_2) == 80);

typedef struct radio_cell_identity_gsm_1_5 {
    RadioCellIdentityGsm_1_2 base RADIO_ALIGNED(8);
    GBinderHidlVec additionalPlmns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
} RADIO_ALIGNED(8) RadioCellIdentityGsm_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityGsm_1_5) == 96);

typedef struct radio_cell_identity_wcdma {
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    gint32 lac RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    gint32 psc RADIO_ALIGNED(4);
    gint32 uarfcn RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellIdentityWcdma;
G_STATIC_ASSERT(sizeof(RadioCellIdentityWcdma) == 48);

typedef struct radio_cell_identity_wcdma_1_2 {
    RadioCellIdentityWcdma base RADIO_ALIGNED(8);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityWcdma_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityWcdma_1_2) == 80);

typedef struct radio_closed_subscriber_group_info {
    gboolean csgIndication RADIO_ALIGNED(1);
    GBinderHidlString homeNodebName RADIO_ALIGNED(8);
    gint32 csgIdentity RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioClosedSubscriberGroupInfo; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioClosedSubscriberGroupInfo) == 32);

typedef struct radio_cell_identity_wcdma_1_5 {
    RadioCellIdentityWcdma_1_2 base RADIO_ALIGNED(8);
    GBinderHidlVec additionalPlmns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    guint8 csgInfoAvailable RADIO_ALIGNED(1);
    union {
        RadioClosedSubscriberGroupInfo gsm RADIO_ALIGNED(8);
    } optionalCsgInfo RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityWcdma_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityWcdma_1_5) == 136);

typedef struct radio_cell_identity_cdma {
    gint32 networkId RADIO_ALIGNED(4);
    gint32 systemId RADIO_ALIGNED(4);
    gint32 baseStationId RADIO_ALIGNED(4);
    gint32 longitude RADIO_ALIGNED(4);
    gint32 latitude RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioCellIdentityCdma;
G_STATIC_ASSERT(sizeof(RadioCellIdentityCdma) == 20);

typedef struct radio_cell_identity_cdma_1_2 {
    RadioCellIdentityCdma base RADIO_ALIGNED(4);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
} RADIO_ALIGNED(4) RadioCellIdentityCdma_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityCdma_1_2) == 56);

typedef struct radio_cell_identity_lte {
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    gint32 ci RADIO_ALIGNED(4);
    gint32 pci RADIO_ALIGNED(4);
    gint32 tac RADIO_ALIGNED(4);
    gint32 earfcn RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellIdentityLte;
G_STATIC_ASSERT(sizeof(RadioCellIdentityLte) == 48);

typedef struct radio_cell_identity_lte_1_2 {
    RadioCellIdentityLte base RADIO_ALIGNED(8);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
    gint32 bandwidth RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellIdentityLte_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityLte_1_2) == 88);

typedef struct radio_cell_identity_lte_1_5 {
    RadioCellIdentityLte_1_2 base RADIO_ALIGNED(8);
    GBinderHidlVec additionalPlmns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    guint8 csgInfoAvailable RADIO_ALIGNED(1);
    union {
        RadioClosedSubscriberGroupInfo gsm RADIO_ALIGNED(8);
    } optionalCsgInfo RADIO_ALIGNED(8);
    GBinderHidlVec bands RADIO_ALIGNED(8); /* vec<EutranBands> */
} RADIO_ALIGNED(8) RadioCellIdentityLte_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityLte_1_5) == 160);

typedef struct radio_cell_identity_tdscdma {
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    gint32 lac RADIO_ALIGNED(4);
    gint32 cid RADIO_ALIGNED(4);
    gint32 cpid RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellIdentityTdscdma;
G_STATIC_ASSERT(sizeof(RadioCellIdentityTdscdma) == 48);

typedef struct radio_cell_identity_tdscdma_1_2 {
    RadioCellIdentityTdscdma base RADIO_ALIGNED(8);
    gint32 uarfcn RADIO_ALIGNED(8);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityTdscdma_1_2; /* Since 1.2.3 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityTdscdma_1_2) == 88);

typedef struct radio_cell_identity_tdscdma_1_5 {
    RadioCellIdentityTdscdma_1_2 base RADIO_ALIGNED(8);
    GBinderHidlVec additionalPlmns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    guint8 csgInfoAvailable RADIO_ALIGNED(1);
    union {
        RadioClosedSubscriberGroupInfo gsm RADIO_ALIGNED(8);
    } optionalCsgInfo RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityTdscdma_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityTdscdma_1_5) == 144);

typedef struct radio_cell_identity_nr {
    GBinderHidlString mcc RADIO_ALIGNED(8);
    GBinderHidlString mnc RADIO_ALIGNED(8);
    guint64 nci RADIO_ALIGNED(8);
    guint32 pci RADIO_ALIGNED(4);
    gint32 tac RADIO_ALIGNED(4);
    gint32 nrarfcn RADIO_ALIGNED(4);
    RadioCellIdentityOperatorNames operatorNames RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellIdentityNr; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityNr) == 88);

typedef struct radio_cell_identity_nr_1_5 {
    RadioCellIdentityNr base RADIO_ALIGNED(8);
    GBinderHidlVec additionalPlmns RADIO_ALIGNED(8); /* vec<GBinderHidlString> */
    GBinderHidlVec bands RADIO_ALIGNED(8); /* vec<NgranBands> */
} RADIO_ALIGNED(8) RadioCellIdentityNr_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentityNr_1_5) == 120);

typedef struct radio_cell_identity_1_5 {
    guint8 cellIdentityType RADIO_ALIGNED(1); /* RADIO_CELL_IDENTITY_TYPE_1_5 */
    union {
        RadioCellIdentityGsm_1_5 gsm RADIO_ALIGNED(8);
        RadioCellIdentityWcdma_1_5 wcdma RADIO_ALIGNED(8);
        RadioCellIdentityTdscdma_1_5 tdscdma RADIO_ALIGNED(8);
        RadioCellIdentityCdma_1_2 cdma RADIO_ALIGNED(8);
        RadioCellIdentityLte_1_5 lte RADIO_ALIGNED(8);
        RadioCellIdentityNr_1_5 nr RADIO_ALIGNED(8);
    } RADIO_ALIGNED(8) identity;
} RADIO_ALIGNED(8) RadioCellIdentity_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellIdentity_1_5) == 168);

typedef struct radio_voice_reg_state_result {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    guint8 cssSupported RADIO_ALIGNED(1);
    gint32 roamingIndicator RADIO_ALIGNED(4);
    gint32 systemIsInPrl RADIO_ALIGNED(4);
    gint32 defaultRoamingIndicator RADIO_ALIGNED(4);
    gint32 reasonForDenial RADIO_ALIGNED(4);
    RadioCellIdentity cellIdentity RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioVoiceRegStateResult;
G_STATIC_ASSERT(sizeof(RadioVoiceRegStateResult) == 120);

typedef struct radio_voice_reg_state_result_1_2 {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    guint8 cssSupported RADIO_ALIGNED(1);
    gint32 roamingIndicator RADIO_ALIGNED(4);
    gint32 systemIsInPrl RADIO_ALIGNED(4);
    gint32 defaultRoamingIndicator RADIO_ALIGNED(4);
    gint32 reasonForDenial RADIO_ALIGNED(4);
    RadioCellIdentity_1_2 cellIdentity RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioVoiceRegStateResult_1_2;  /* Since 1.2.4 */
G_STATIC_ASSERT(sizeof(RadioVoiceRegStateResult_1_2) == 120);

typedef struct radio_data_reg_state_result {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    gint32 reasonDataDenied RADIO_ALIGNED(4);
    gint32 maxDataCalls RADIO_ALIGNED(4);
    RadioCellIdentity cellIdentity RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioDataRegStateResult;
G_STATIC_ASSERT(sizeof(RadioDataRegStateResult) == 104);

typedef struct radio_data_reg_state_result_1_2 {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    gint32 reasonDataDenied RADIO_ALIGNED(4);
    gint32 maxDataCalls RADIO_ALIGNED(4);
    RadioCellIdentity_1_2 cellIdentity RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioDataRegStateResult_1_2;  /* Since 1.2.4 */
G_STATIC_ASSERT(sizeof(RadioDataRegStateResult_1_2) == 104);

typedef struct radio_data_reg_lte_vops_info {
    guint8 isVopsSupported RADIO_ALIGNED(1);
    guint8 isEmcBearerSupported RADIO_ALIGNED(1);
} RADIO_ALIGNED(1) RadioDataRegLteVopsInfo;  /* Since 1.4.12 */
G_STATIC_ASSERT(sizeof(RadioDataRegLteVopsInfo) == 2);

typedef struct radio_data_reg_nr_inicators {
    guint8 isEndcAvailable RADIO_ALIGNED(1);
    guint8 isDcNrRestricted RADIO_ALIGNED(1);
    guint8 isNrAvailable RADIO_ALIGNED(1);
} RADIO_ALIGNED(1) RadioDataRegNrIndicators;  /* Since 1.4.12 */
G_STATIC_ASSERT(sizeof(RadioDataRegNrIndicators) == 3);

typedef struct radio_data_reg_state_result_1_4 {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    gint32 reasonDataDenied RADIO_ALIGNED(4);
    gint32 maxDataCalls RADIO_ALIGNED(4);
    RadioCellIdentity_1_2 cellIdentity RADIO_ALIGNED(8);
    guint8 lteVopsInfoValid RADIO_ALIGNED(1);
    RadioDataRegLteVopsInfo lteVopsInfo RADIO_ALIGNED(1);
    RadioDataRegNrIndicators nrIndicators RADIO_ALIGNED(1);
} RADIO_ALIGNED(8) RadioDataRegStateResult_1_4;  /* Since 1.4.12 */
G_STATIC_ASSERT(sizeof(RadioDataRegStateResult_1_4) == 112);

typedef struct radio_reg_cdma2000_registration_info {
    guint8 cssSupported RADIO_ALIGNED(1);
    gint32 roamingIndicator RADIO_ALIGNED(4);
    gint32 systemIsInPrl RADIO_ALIGNED(4);
    gint32 defaultRoamingIndicator RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioRegCdma2000RegistrationInfo; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioRegCdma2000RegistrationInfo) == 16);

typedef struct radio_reg_eutran_registration_info {
    RadioDataRegLteVopsInfo lteVopsInfo RADIO_ALIGNED(1);
    RadioDataRegNrIndicators nrIndicators RADIO_ALIGNED(1);
} RADIO_ALIGNED(1) RadioRegEutranRegistrationInfo; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioRegEutranRegistrationInfo) == 5);

typedef struct radio_reg_state_result_1_5 {
    RADIO_REG_STATE regState RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    gint32 reasonDataDenied RADIO_ALIGNED(4);
    RadioCellIdentity_1_5 cellIdentity RADIO_ALIGNED(8);
    GBinderHidlString registeredPlmn RADIO_ALIGNED(8);
    guint8 accessTechnologySpecificInfoType RADIO_ALIGNED(1); /* RADIO_REG_ACCESS_TECHNOLOGY_SPECIFIC_INFO_TYPE */
    union {
        RadioRegCdma2000RegistrationInfo cdmaInfo RADIO_ALIGNED(4);
        RadioRegEutranRegistrationInfo eutranInfo RADIO_ALIGNED(1);
    } accessTechnologySpecificInfo RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioRegStateResult_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioRegStateResult_1_5) == 224);

typedef struct radio_signal_strength_gsm {
    guint32 signalStrength RADIO_ALIGNED(4);
    guint32 bitErrorRate RADIO_ALIGNED(4);
    gint32 timingAdvance RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthGsm;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthGsm) == 12);

typedef struct radio_signal_strength_wcdma {
    gint32 signalStrength RADIO_ALIGNED(4);
    gint32 bitErrorRate RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthWcdma;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthWcdma) == 8);

typedef struct radio_signal_strength_wcdma_1_2 {
    RadioSignalStrengthWcdma base RADIO_ALIGNED(4);
    gint32 rscp RADIO_ALIGNED(4);
    gint32 ecno RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthWcdma_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioSignalStrengthWcdma_1_2) == 16);

typedef struct radio_signal_strength_cdma {
    guint32 dbm RADIO_ALIGNED(4);
    guint32 ecio RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthCdma;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthCdma) == 8);

typedef struct radio_signal_strength_evdo {
    guint32 dbm RADIO_ALIGNED(4);
    guint32 ecio RADIO_ALIGNED(4);
    guint32 signalNoiseRatio RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthEvdo;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthEvdo) == 12);

typedef struct radio_signal_strength_lte {
    guint32 signalStrength RADIO_ALIGNED(4);
    guint32 rsrp RADIO_ALIGNED(4);
    guint32 rsrq RADIO_ALIGNED(4);
    gint32 rssnr RADIO_ALIGNED(4);
    guint32 cqi RADIO_ALIGNED(4);
    guint32 timingAdvance RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthLte;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthLte) == 24);

typedef struct radio_signal_strength_tdscdma {
    guint32 rscp RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthTdScdma;
G_STATIC_ASSERT(sizeof(RadioSignalStrengthTdScdma) == 4);

typedef struct radio_signal_strength_tdscdma_1_2 {
    guint32 signalStrength RADIO_ALIGNED(4);
    guint32 bitErrorRate RADIO_ALIGNED(4);
    guint32 rscp RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthTdScdma_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioSignalStrengthTdScdma_1_2) == 12);

typedef struct radio_signal_strength {
    RadioSignalStrengthGsm gw RADIO_ALIGNED(4);
    RadioSignalStrengthCdma cdma RADIO_ALIGNED(4);
    RadioSignalStrengthEvdo evdo RADIO_ALIGNED(4);
    RadioSignalStrengthLte lte RADIO_ALIGNED(4);
    RadioSignalStrengthTdScdma tdScdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrength;
G_STATIC_ASSERT(sizeof(RadioSignalStrength) == 60);

typedef struct radio_signal_strength_1_2 {
    RadioSignalStrengthGsm gw RADIO_ALIGNED(4);
    RadioSignalStrengthCdma cdma RADIO_ALIGNED(4);
    RadioSignalStrengthEvdo evdo RADIO_ALIGNED(4);
    RadioSignalStrengthLte lte RADIO_ALIGNED(4);
    RadioSignalStrengthTdScdma tdScdma RADIO_ALIGNED(4);
    RadioSignalStrengthWcdma_1_2 wcdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrength_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioSignalStrength_1_2) == 76);

typedef struct radio_signal_strength_nr {
    gint32 ssRsrp RADIO_ALIGNED(4);
    gint32 ssRsrq RADIO_ALIGNED(4);
    gint32 ssSinr RADIO_ALIGNED(4);
    gint32 csiRsrp RADIO_ALIGNED(4);
    gint32 csiRsrq RADIO_ALIGNED(4);
    gint32 csiSinr RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrengthNr; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioSignalStrengthNr) == 24);

typedef struct radio_signal_strength_1_4 {
    RadioSignalStrengthGsm gsm RADIO_ALIGNED(4);
    RadioSignalStrengthCdma cdma RADIO_ALIGNED(4);
    RadioSignalStrengthEvdo evdo RADIO_ALIGNED(4);
    RadioSignalStrengthLte lte RADIO_ALIGNED(4);
    RadioSignalStrengthTdScdma_1_2 tdscdma RADIO_ALIGNED(4);
    RadioSignalStrengthWcdma_1_2 wcdma RADIO_ALIGNED(4);
    RadioSignalStrengthNr nr RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSignalStrength_1_4; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioSignalStrength_1_4) == 108);

typedef struct radio_cell_info_gsm {
    RadioCellIdentityGsm cellIdentityGsm RADIO_ALIGNED(8);
    RadioSignalStrengthGsm signalStrengthGsm RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoGsm;
G_STATIC_ASSERT(sizeof(RadioCellInfoGsm) == 64);

typedef struct radio_cell_info_wcdma {
    RadioCellIdentityWcdma cellIdentityWcdma RADIO_ALIGNED(8);
    RadioSignalStrengthWcdma signalStrengthWcdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoWcdma;
G_STATIC_ASSERT(sizeof(RadioCellInfoWcdma) == 56);

typedef struct radio_cell_info_cdma {
    RadioCellIdentityCdma cellIdentityCdma RADIO_ALIGNED(4);
    RadioSignalStrengthCdma signalStrengthCdma RADIO_ALIGNED(4);
    RadioSignalStrengthEvdo signalStrengthEvdo RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioCellInfoCdma;
G_STATIC_ASSERT(sizeof(RadioCellInfoCdma) == 40);

typedef struct radio_cell_info_lte {
    RadioCellIdentityLte cellIdentityLte RADIO_ALIGNED(8);
    RadioSignalStrengthLte signalStrengthLte RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoLte;
G_STATIC_ASSERT(sizeof(RadioCellInfoLte) == 72);

typedef struct radio_cell_info_tdscdma {
    RadioCellIdentityTdscdma cellIdentityTdscdma RADIO_ALIGNED(8);
    RadioSignalStrengthTdScdma signalStrengthTdscdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoTdscdma;
G_STATIC_ASSERT(sizeof(RadioCellInfoTdscdma) == 56);

typedef struct radio_cell_info_gsm_1_2 {
    RadioCellIdentityGsm_1_2 cellIdentityGsm RADIO_ALIGNED(8);
    RadioSignalStrengthGsm signalStrengthGsm RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoGsm_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoGsm_1_2) == 96);

typedef struct radio_cell_info_wcdma_1_2 {
    RadioCellIdentityWcdma_1_2 cellIdentityWcdma RADIO_ALIGNED(8);
    RadioSignalStrengthWcdma_1_2 signalStrengthWcdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoWcdma_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoWcdma_1_2) == 96);

typedef struct radio_cell_info_cdma_1_2 {
    RadioCellIdentityCdma_1_2 cellIdentityCdma RADIO_ALIGNED(4);
    RadioSignalStrengthCdma signalStrengthCdma RADIO_ALIGNED(4);
    RadioSignalStrengthEvdo signalStrengthEvdo RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioCellInfoCdma_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoCdma_1_2) == 80);

typedef struct radio_cell_info_lte_1_2 {
    RadioCellIdentityLte_1_2 cellIdentityLte RADIO_ALIGNED(8);
    RadioSignalStrengthLte signalStrengthLte RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoLte_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoLte_1_2) == 112);

typedef struct radio_cell_info_lte_1_4 {
    RadioCellInfoLte_1_2 base RADIO_ALIGNED(8);
    guint8 isEndcAvailable RADIO_ALIGNED(1);
} RADIO_ALIGNED(8) RadioCellInfoLte_1_4; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioCellInfoLte_1_4) == 120);

typedef struct radio_cell_info_tdscdma_1_2 {
    RadioCellIdentityTdscdma_1_2 cellIdentityTdscdma RADIO_ALIGNED(8);
    RadioSignalStrengthTdScdma_1_2 signalStrengthTdscdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoTdscdma_1_2; /* Since 1.2.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoTdscdma_1_2) == 104);

typedef struct radio_cell_info_nr {
    RadioSignalStrengthNr signalStrength RADIO_ALIGNED(4);
    RadioCellIdentityNr cellIdentity RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellInfoNr; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioCellInfoNr) == 112);

typedef struct radio_cell_info_1_4 {
    guint8 registered RADIO_ALIGNED(1);
    RADIO_CELL_CONNECTION_STATUS connectionStatus RADIO_ALIGNED(4);
    guint8 cellInfoType RADIO_ALIGNED(1); /* RADIO_CELL_INFO_TYPE_1_4 */
    union {
        RadioCellInfoGsm_1_2 gsm RADIO_ALIGNED(8);
        RadioCellInfoCdma_1_2 cdma RADIO_ALIGNED(8);
        RadioCellInfoWcdma_1_2 wcdma RADIO_ALIGNED(8);
        RadioCellInfoTdscdma_1_2 tdscdma RADIO_ALIGNED(8);
        RadioCellInfoLte_1_4 lte RADIO_ALIGNED(8);
        RadioCellInfoNr nr RADIO_ALIGNED(8);
    } info RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellInfo_1_4; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioCellInfo_1_4) == 136);

typedef struct radio_cell_info_gsm_1_5 {
    RadioCellIdentityGsm_1_5 cellIdentityGsm RADIO_ALIGNED(8);
    RadioSignalStrengthGsm signalStrengthGsm RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoGsm_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoGsm_1_5) == 112);

typedef struct radio_cell_info_wcdma_1_5 {
    RadioCellIdentityWcdma_1_5 cellIdentityWcdma RADIO_ALIGNED(8);
    RadioSignalStrengthWcdma_1_2 signalStrengthWcdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoWcdma_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoWcdma_1_5) == 152);

typedef struct radio_cell_info_lte_1_5 {
    RadioCellIdentityLte_1_5 cellIdentityLte RADIO_ALIGNED(8);
    RadioSignalStrengthLte signalStrengthLte RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoLte_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoLte_1_5) == 184);

typedef struct radio_cell_info_tdscdma_1_5 {
    RadioCellIdentityTdscdma_1_5 cellIdentityTdscdma RADIO_ALIGNED(8);
    RadioSignalStrengthTdScdma_1_2 signalStrengthTdscdma RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoTdscdma_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoTdscdma_1_5) == 160);

typedef struct radio_cell_info_nr_1_5 {
    RadioCellIdentityNr_1_5 cellIdentityNr RADIO_ALIGNED(8);
    RadioSignalStrengthNr signalStrengthNr RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCellInfoNr_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfoNr_1_5) == 144);

typedef struct radio_cell_info_1_5 {
    guint8 registered RADIO_ALIGNED(1);
    gint32 timeStampType RADIO_ALIGNED(4);
    guint64 timeStamp RADIO_ALIGNED(8);
    RADIO_CELL_CONNECTION_STATUS connectionStatus RADIO_ALIGNED(4);
    guint8 cellInfoType RADIO_ALIGNED(8); /* RADIO_CELL_INFO_TYPE_1_5 */
    union {
        RadioCellInfoGsm_1_5 gsm RADIO_ALIGNED(8);
        RadioCellInfoWcdma_1_5 wcdma RADIO_ALIGNED(8);
        RadioCellInfoTdscdma_1_5 tdscdma RADIO_ALIGNED(8);
        RadioCellInfoLte_1_5 lte RADIO_ALIGNED(8);
        RadioCellInfoNr_1_5 nr RADIO_ALIGNED(8);
        RadioCellInfoCdma_1_2 cdma RADIO_ALIGNED(8);
    } info RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioCellInfo_1_5; /* Since 1.5.0 */
G_STATIC_ASSERT(sizeof(RadioCellInfo_1_5) == 216);

typedef struct radio_physical_channel_config {
    RADIO_CELL_CONNECTION_STATUS connectionStatus RADIO_ALIGNED(4);
    gint32 cellBandwidthDownlink RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioPhysicalChannelConfig; /* Since 1.5.4 */
G_STATIC_ASSERT(sizeof(RadioPhysicalChannelConfig) == 8);

typedef struct radio_frequency_info {
    guint8 frequencyInfoType RADIO_ALIGNED(1); /* RADIO_FREQUENCY_INFO_TYPE */
    union {
        RADIO_FREQUENCY_RANGE range RADIO_ALIGNED(4);
        gint32 channelNumber RADIO_ALIGNED(4);
    } info RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioFrequencyInfo; /* Since 1.5.4 */
G_STATIC_ASSERT(sizeof(RadioFrequencyInfo) == 8);

typedef struct radio_physical_channel_config_1_4 {
    RadioPhysicalChannelConfig base RADIO_ALIGNED(4);
    RADIO_TECH rat RADIO_ALIGNED(4);
    RadioFrequencyInfo rfInfo RADIO_ALIGNED(4);
    GBinderHidlVec contextIds RADIO_ALIGNED(8);
    guint32 physicalCellId RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioPhysicalChannelConfig_1_4; /* Since 1.5.4 */
G_STATIC_ASSERT(sizeof(RadioPhysicalChannelConfig_1_4) == 48);

typedef struct radio_gsm_broadcast_sms_config {
    gint32 fromServiceId RADIO_ALIGNED(4);
    gint32 toServiceId RADIO_ALIGNED(4);
    gint32 fromCodeScheme RADIO_ALIGNED(4);
    gint32 toCodeScheme RADIO_ALIGNED(4);
    guint8 selected RADIO_ALIGNED(1);
} RADIO_ALIGNED(4) RadioGsmBroadcastSmsConfig;
G_STATIC_ASSERT(sizeof(RadioGsmBroadcastSmsConfig) == 20);

typedef struct radio_select_uicc_sub {
    gint32 slot RADIO_ALIGNED(4);
    gint32 appIndex RADIO_ALIGNED(4);
    gint32 subType RADIO_ALIGNED(4);
    RADIO_UICC_SUB_ACT actStatus RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioSelectUiccSub;
G_STATIC_ASSERT(sizeof(RadioSelectUiccSub) == 16);

typedef struct radio_supp_svc_notification {
    guint8 isMT RADIO_ALIGNED(1);
    gint32 code RADIO_ALIGNED(4);
    gint32 index RADIO_ALIGNED(4);
    gint32 type RADIO_ALIGNED(4);
    GBinderHidlString number RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioSuppSvcNotification;
G_STATIC_ASSERT(sizeof(RadioSuppSvcNotification) == 32);

typedef struct radio_sim_refresh {
    gint32 type RADIO_ALIGNED(4);
    gint32 efId RADIO_ALIGNED(4);
    GBinderHidlString aid RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioSimRefresh;
G_STATIC_ASSERT(sizeof(RadioSimRefresh) == 24);

typedef struct radio_capability {
    gint32 session RADIO_ALIGNED(4);
    RADIO_CAPABILITY_PHASE phase RADIO_ALIGNED(4);
    RADIO_ACCESS_FAMILY raf RADIO_ALIGNED(4);
    GBinderHidlString logicalModemUuid RADIO_ALIGNED(8);
    RADIO_CAPABILITY_STATUS status RADIO_ALIGNED(4);
} RADIO_ALIGNED(8) RadioCapability;
G_STATIC_ASSERT(sizeof(RadioCapability) == 40);

typedef struct radio_lce_status_info {
    guint32 lceStatus RADIO_ALIGNED(4);
    guint8 actualIntervalMs RADIO_ALIGNED(1);
} RADIO_ALIGNED(4) RadioLceStatusInfo;
G_STATIC_ASSERT(sizeof(RadioLceStatusInfo) == 8);

typedef struct radio_activity_stats_info {
    guint32 sleepModeTimeMs RADIO_ALIGNED(4);
    guint32 idleModeTimeMs RADIO_ALIGNED(4);
    guint32 txmModetimeMs[5 /* NUM_TX_POWER_LEVELS */] RADIO_ALIGNED(4);
    guint32 rxModeTimeMs RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioActivityStatsInfo;
G_STATIC_ASSERT(sizeof(RadioActivityStatsInfo) == 32);

typedef struct radio_hardware_config {
    gint32 type RADIO_ALIGNED(4);
    GBinderHidlString uuid RADIO_ALIGNED(8);
    gint32 state RADIO_ALIGNED(4);
    GBinderHidlVec modem RADIO_ALIGNED(8); /* vec<RadioHardwareConfigModem> */
    GBinderHidlVec sim RADIO_ALIGNED(8);   /* vec<RadioHardwareConfigSim> */
} RADIO_ALIGNED(8) RadioHardwareConfig;
G_STATIC_ASSERT(sizeof(RadioHardwareConfig) == 64);

typedef struct radio_hardware_config_modem {
    gint32 rilModel RADIO_ALIGNED(4);
    guint32 rat RADIO_ALIGNED(4);
    gint32 maxVoice RADIO_ALIGNED(4);
    gint32 maxData RADIO_ALIGNED(4);
    gint32 maxStandby RADIO_ALIGNED(4);
} RADIO_ALIGNED(4) RadioHardwareConfigModem;
G_STATIC_ASSERT(sizeof(RadioHardwareConfigModem) == 20);

typedef struct radio_hardware_config_sim {
    GBinderHidlString modemUuid RADIO_ALIGNED(8);
} RADIO_ALIGNED(8) RadioHardwareConfigSim;
G_STATIC_ASSERT(sizeof(RadioHardwareConfigSim) == 16);

typedef struct radio_network_scan_result {
    RADIO_SCAN_STATUS status RADIO_ALIGNED(4);
    RADIO_ERROR error RADIO_ALIGNED(4);
    GBinderHidlVec networkInfos RADIO_ALIGNED(8); /* vec<RadioCellInfo> */
                                               /* or vec<RadioCellInfo_1_2> */
                                               /* or vec<RadioCellInfo_1_4> */
                                               /* or vec<RadioCellInfo_1_5> */
} RADIO_ALIGNED(8) RadioNetworkScanResult; /* Since 1.2.5 */
G_STATIC_ASSERT(sizeof(RadioNetworkScanResult) == 24);

typedef struct radio_network_scan_specifier {
    RADIO_ACCESS_NETWORKS radioAccessNetwork RADIO_ALIGNED(4);
    GBinderHidlVec geranBands RADIO_ALIGNED(8); /* vec<RADIO_GERAN_BAND> */
    GBinderHidlVec utranBands RADIO_ALIGNED(8); /* vec<RADIO_UTRAN_BAND> */
    GBinderHidlVec eutranBands RADIO_ALIGNED(8); /* vec<RADIO_EUTRAN_BAND> */
    GBinderHidlVec channels RADIO_ALIGNED(8); /* vec<int32_t> */
} RADIO_ALIGNED(8) RadioAccessSpecifier; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RadioAccessSpecifier) == 72);

typedef struct radio_network_scan_specifier_1_5 {
    RADIO_ACCESS_NETWORKS radioAccessNetwork RADIO_ALIGNED(4);
    guint8 type RADIO_ALIGNED(8); /* RADIO_NETWORK_SCAN_SPECIFIER_1_5_TYPE */
    GBinderHidlVec bands RADIO_ALIGNED(8);  /* vec<RADIO_GERAN_BAND> */
                                         /* or vec<RADIO_UTRAN_BAND> */
                                         /* or vec<RADIO_EUTRAN_BAND> */
                                         /* or vec<RADIO_NGRAN_BAND> */
    GBinderHidlVec channels RADIO_ALIGNED(8); /* vec<int32_t> */
} RADIO_ALIGNED(8) RadioAccessSpecifier_1_5; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RadioAccessSpecifier_1_5) == 48);

typedef struct radio_network_scan_request {
    RADIO_SCAN_TYPE type RADIO_ALIGNED(4);
    gint32 interval RADIO_ALIGNED(4); /* Periodic scan interval, seconds */
    GBinderHidlVec specifiers RADIO_ALIGNED(8); /* vec<RadioAccessSpecifier> */
} RADIO_ALIGNED(8) RadioNetworkScanRequest; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RadioNetworkScanRequest) == 24);

typedef struct radio_network_scan_request_1_5 {
    RADIO_SCAN_TYPE type RADIO_ALIGNED(4);
    gint32 interval RADIO_ALIGNED(4); /* [5..300] seconds */
    GBinderHidlVec specifiers RADIO_ALIGNED(8); /*vec <RadioAccessSpecifier> */
                                          /*or vec<RadioAccessSpecifier_1_5> */
    gint32 maxSearchTime RADIO_ALIGNED(4);      /* [60..3600] seconds */
    guint8 incrementalResults RADIO_ALIGNED(1); /* TRUE/FALSE */
    gint32 incrementalResultsPeriodicity RADIO_ALIGNED(4); /* [1..10] */
    GBinderHidlVec mccMncs RADIO_ALIGNED(8);    /* vec<GBinderHidlString> */
} RADIO_ALIGNED(8) RadioNetworkScanRequest_1_2,
    RadioNetworkScanRequest_1_5; /* Since 1.5.2 */
G_STATIC_ASSERT(sizeof(RadioNetworkScanRequest_1_5) == 56);

/* c(req,resp,callName,CALL_NAME) */
#define RADIO_CALL_1_0(c) \
    c(2,1,getIccCardStatus,GET_ICC_CARD_STATUS) \
    c(3,2,supplyIccPinForApp,SUPPLY_ICC_PIN_FOR_APP) \
    c(4,3,supplyIccPukForApp,SUPPLY_ICC_PUK_FOR_APP) \
    c(5,4,supplyIccPin2ForApp,SUPPLY_ICC_PIN2_FOR_APP) \
    c(6,5,supplyIccPuk2ForApp,SUPPLY_ICC_PUK2_FOR_APP) \
    c(7,6,changeIccPinForApp,CHANGE_ICC_PIN_FOR_APP) \
    c(8,7,changeIccPin2ForApp,CHANGE_ICC_PIN2_FOR_APP) \
    c(9,8,supplyNetworkDepersonalization,SUPPLY_NETWORK_DEPERSONALIZATION) \
    c(10,9,getCurrentCalls,GET_CURRENT_CALLS) \
    c(11,10,dial,DIAL) \
    c(12,11,getImsiForApp,GET_IMSI_FOR_APP) \
    c(13,12,hangup,HANGUP) \
    c(14,13,hangupWaitingOrBackground,HANGUP_WAITING_OR_BACKGROUND) \
    c(15,14,hangupForegroundResumeBackground,HANGUP_FOREGROUND_RESUME_BACKGROUND) \
    c(16,15,switchWaitingOrHoldingAndActive,SWITCH_WAITING_OR_HOLDING_AND_ACTIVE) \
    c(17,16,conference,CONFERENCE) \
    c(18,17,rejectCall,REJECT_CALL) \
    c(19,18,getLastCallFailCause,GET_LAST_CALL_FAIL_CAUSE) \
    c(20,19,getSignalStrength,GET_SIGNAL_STRENGTH) \
    c(21,20,getVoiceRegistrationState,GET_VOICE_REGISTRATION_STATE) \
    c(22,21,getDataRegistrationState,GET_DATA_REGISTRATION_STATE) \
    c(23,22,getOperator,GET_OPERATOR) \
    c(24,23,setRadioPower,SET_RADIO_POWER) \
    c(25,24,sendDtmf,SEND_DTMF) \
    c(26,25,sendSms,SEND_SMS) \
    c(27,26,sendSMSExpectMore,SEND_SMS_EXPECT_MORE) \
    c(28,27,setupDataCall,SETUP_DATA_CALL) \
    c(29,28,iccIOForApp,ICC_IO_FOR_APP) \
    c(30,29,sendUssd,SEND_USSD) \
    c(31,30,cancelPendingUssd,CANCEL_PENDING_USSD) \
    c(32,31,getClir,GET_CLIR) \
    c(33,32,setClir,SET_CLIR) \
    c(34,33,getCallForwardStatus,GET_CALL_FORWARD_STATUS) \
    c(35,34,setCallForward,SET_CALL_FORWARD) \
    c(36,35,getCallWaiting,GET_CALL_WAITING) \
    c(37,36,setCallWaiting,SET_CALL_WAITING) \
    c(38,37,acknowledgeLastIncomingGsmSms,ACKNOWLEDGE_LAST_INCOMING_GSM_SMS) \
    c(39,38,acceptCall,ACCEPT_CALL) \
    c(40,39,deactivateDataCall,DEACTIVATE_DATA_CALL) \
    c(41,40,getFacilityLockForApp,GET_FACILITY_LOCK_FOR_APP) \
    c(42,41,setFacilityLockForApp,SET_FACILITY_LOCK_FOR_APP) \
    c(43,42,setBarringPassword,SET_BARRING_PASSWORD) \
    c(44,43,getNetworkSelectionMode,GET_NETWORK_SELECTION_MODE) \
    c(45,44,setNetworkSelectionModeAutomatic,SET_NETWORK_SELECTION_MODE_AUTOMATIC) \
    c(46,45,setNetworkSelectionModeManual,SET_NETWORK_SELECTION_MODE_MANUAL) \
    c(47,46,getAvailableNetworks,GET_AVAILABLE_NETWORKS) \
    c(48,47,startDtmf,START_DTMF) \
    c(49,48,stopDtmf,STOP_DTMF) \
    c(50,49,getBasebandVersion,GET_BASEBAND_VERSION) \
    c(51,50,separateConnection,SEPARATE_CONNECTION) \
    c(52,51,setMute,SET_MUTE) \
    c(53,52,getMute,GET_MUTE) \
    c(54,53,getClip,GET_CLIP) \
    c(55,54,getDataCallList,GET_DATA_CALL_LIST) \
    c(56,55,setSuppServiceNotifications,SET_SUPP_SERVICE_NOTIFICATIONS) \
    c(57,56,writeSmsToSim,WRITE_SMS_TO_SIM) \
    c(58,57,deleteSmsOnSim,DELETE_SMS_ON_SIM) \
    c(59,58,setBandMode,SET_BAND_MODE) \
    c(60,59,getAvailableBandModes,GET_AVAILABLE_BAND_MODES) \
    c(61,60,sendEnvelope,SEND_ENVELOPE) \
    c(62,61,sendTerminalResponseToSim,SEND_TERMINAL_RESPONSE_TO_SIM) \
    c(63,62,handleStkCallSetupRequestFromSim,HANDLE_STK_CALL_SETUP_REQUEST_FROM_SIM) \
    c(64,63,explicitCallTransfer,EXPLICIT_CALL_TRANSFER) \
    c(65,64,setPreferredNetworkType,SET_PREFERRED_NETWORK_TYPE) \
    c(66,65,getPreferredNetworkType,GET_PREFERRED_NETWORK_TYPE) \
    c(67,66,getNeighboringCids,GET_NEIGHBORING_CIDS) \
    c(68,67,setLocationUpdates,SET_LOCATION_UPDATES) \
    c(69,68,setCdmaSubscriptionSource,SET_CDMA_SUBSCRIPTION_SOURCE) \
    c(70,69,setCdmaRoamingPreference,SET_CDMA_ROAMING_PREFERENCE) \
    c(71,70,getCdmaRoamingPreference,GET_CDMA_ROAMING_PREFERENCE) \
    c(72,71,setTTYMode,SET_TTY_MODE) \
    c(73,72,getTTYMode,GET_TTY_MODE) \
    c(74,73,setPreferredVoicePrivacy,SET_PREFERRED_VOICE_PRIVACY) \
    c(75,74,getPreferredVoicePrivacy,GET_PREFERRED_VOICE_PRIVACY) \
    c(76,75,sendCDMAFeatureCode,SEND_CDMA_FEATURE_CODE) \
    c(77,76,sendBurstDtmf,SEND_BURST_DTMF) \
    c(78,77,sendCdmaSms,SEND_CDMA_SMS) \
    c(79,78,acknowledgeLastIncomingCdmaSms,ACKNOWLEDGE_LAST_INCOMING_CDMA_SMS) \
    c(80,79,getGsmBroadcastConfig,GET_GSM_BROADCAST_CONFIG) \
    c(81,80,setGsmBroadcastConfig,SET_GSM_BROADCAST_CONFIG) \
    c(82,81,setGsmBroadcastActivation,SET_GSM_BROADCAST_ACTIVATION) \
    c(83,82,getCdmaBroadcastConfig,GET_CDMA_BROADCAST_CONFIG) \
    c(84,83,setCdmaBroadcastConfig,SET_CDMA_BROADCAST_CONFIG) \
    c(85,84,setCdmaBroadcastActivation,SET_CDMA_BROADCAST_ACTIVATION) \
    c(86,85,getCDMASubscription,GET_CDMA_SUBSCRIPTION) \
    c(87,86,writeSmsToRuim,WRITE_SMS_TO_RUIM) \
    c(88,87,deleteSmsOnRuim,DELETE_SMS_ON_RUIM) \
    c(89,88,getDeviceIdentity,GET_DEVICE_IDENTITY) \
    c(90,89,exitEmergencyCallbackMode,EXIT_EMERGENCY_CALLBACK_MODE) \
    c(91,90,getSmscAddress,GET_SMSC_ADDRESS) \
    c(92,91,setSmscAddress,SET_SMSC_ADDRESS) \
    c(93,92,reportSmsMemoryStatus,REPORT_SMS_MEMORY_STATUS) \
    c(94,93,reportStkServiceIsRunning,REPORT_STK_SERVICE_IS_RUNNING) \
    c(95,94,getCdmaSubscriptionSource,GET_CDMA_SUBSCRIPTION_SOURCE) \
    c(96,95,requestIsimAuthentication,REQUEST_ISIM_AUTHENTICATION) \
    c(97,96,acknowledgeIncomingGsmSmsWithPdu,ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU) \
    c(98,97,sendEnvelopeWithStatus,SEND_ENVELOPE_WITH_STATUS) \
    c(99,98,getVoiceRadioTechnology,GET_VOICE_RADIO_TECHNOLOGY) \
    c(100,99,getCellInfoList,GET_CELL_INFO_LIST) \
    c(101,100,setCellInfoListRate,SET_CELL_INFO_LIST_RATE) \
    c(102,101,setInitialAttachApn,SET_INITIAL_ATTACH_APN) \
    c(103,102,getImsRegistrationState,GET_IMS_REGISTRATION_STATE) \
    c(104,103,sendImsSms,SEND_IMS_SMS) \
    c(105,104,iccTransmitApduBasicChannel,ICC_TRANSMIT_APDU_BASIC_CHANNEL) \
    c(106,105,iccOpenLogicalChannel,ICC_OPEN_LOGICAL_CHANNEL) \
    c(107,106,iccCloseLogicalChannel,ICC_CLOSE_LOGICAL_CHANNEL) \
    c(108,107,iccTransmitApduLogicalChannel,ICC_TRANSMIT_APDU_LOGICAL_CHANNEL) \
    c(109,108,nvReadItem,NV_READ_ITEM) \
    c(110,109,nvWriteItem,NV_WRITE_ITEM) \
    c(111,110,nvWriteCdmaPrl,NV_WRITE_CDMA_PRL) \
    c(112,111,nvResetConfig,NV_RESET_CONFIG) \
    c(113,112,setUiccSubscription,SET_UICC_SUBSCRIPTION) \
    c(114,113,setDataAllowed,SET_DATA_ALLOWED) \
    c(115,114,getHardwareConfig,GET_HARDWARE_CONFIG) \
    c(116,115,requestIccSimAuthentication,REQUEST_ICC_SIM_AUTHENTICATION) \
    c(117,116,setDataProfile,SET_DATA_PROFILE) \
    c(118,117,requestShutdown,REQUEST_SHUTDOWN) \
    c(119,118,getRadioCapability,GET_RADIO_CAPABILITY) \
    c(120,119,setRadioCapability,SET_RADIO_CAPABILITY) \
    c(121,120,startLceService,START_LCE_SERVICE) \
    c(122,121,stopLceService,STOP_LCE_SERVICE) \
    c(123,122,pullLceData,PULL_LCE_DATA) \
    c(124,123,getModemActivityInfo,GET_MODEM_ACTIVITY_INFO) \
    c(125,124,setAllowedCarriers,SET_ALLOWED_CARRIERS) \
    c(126,125,getAllowedCarriers,GET_ALLOWED_CARRIERS) \
    c(127,126,sendDeviceState,SEND_DEVICE_STATE) \
    c(128,127,setIndicationFilter,SET_INDICATION_FILTER) \
    c(129,128,setSimCardPower,SET_SIM_CARD_POWER)

#define RADIO_CALL_1_1(c) \
    c(131,130,setCarrierInfoForImsiEncryption,SET_CARRIER_INFO_FOR_IMSI_ENCRYPTION) \
    c(132,131,setSimCardPower_1_1,SET_SIM_CARD_POWER_1_1) \
    c(133,132,startNetworkScan,START_NETWORK_SCAN) \
    c(134,133,stopNetworkScan,STOP_NETWORK_SCAN) \
    c(135,134,startKeepalive,START_KEEPALIVE) \
    c(136,135,stopKeepalive,STOP_KEEPALIVE)

#define RADIO_CALL_1_2(c) /* Since 1.2.0 */ \
    c(139,138,setSignalStrengthReportingCriteria,SET_SIGNAL_STRENGTH_REPORTING_CRITERIA) \
    c(140,139,setLinkCapacityReportingCriteria,SET_LINK_CAPACITY_REPORTING_CRITERIA)

#define RADIO_CALL_1_3(c) /* Since 1.2.5 */ \
    c(143,144,setSystemSelectionChannels,SET_SYSTEM_SELECTION_CHANNELS) \
    c(144,145,enableModem,ENABLE_MODEM) \
    c(145,146,getModemStackStatus,GET_MODEM_STACK_STATUS)

/*
 * From 1.2.5 to 1.5.0 there was RADIO_CALL_1_4 which took a macro with 4
 * arguments as a parameter. In 1.5.1 it was replaced with RADIO_CALL_1_4_
 * which takes a macro with 5 arguments.
 */
#define RADIO_CALL_1_4_(c) /* Since 1.5.1 */ \
    c(146,155,setupDataCall,SETUP_DATA_CALL,_1_4) \
    c(149,147,emergencyDial,EMERGENCY_DIAL,) \
    c(150,148,startNetworkScan,START_NETWORK_SCAN,_1_4) \
    c(151,152,getPreferredNetworkTypeBitmap,GET_PREFERRED_NETWORK_TYPE_BITMAP,) \
    c(152,153,setPreferredNetworkTypeBitmap,SET_PREFERRED_NETWORK_TYPE_BITMAP,) \
    c(153,156,setAllowedCarriers,SET_ALLOWED_CARRIERS,_1_4) \
    c(154,157,getAllowedCarriers,GET_ALLOWED_CARRIERS,_1_4) \
    c(155,158,getSignalStrength,GET_SIGNAL_STRENGTH,_1_4)

/*
 * Similarly to RADIO_CALL_1_4, RADIO_CALL_1_5 macro which appeared in 1.5.0
 * was replaced with RADIO_CALL_1_5_ in 1.5.1
 */
#define RADIO_CALL_1_5_(c) /* Since 1.5.1 */ \
    c(156,159,setSignalStrengthReportingCriteria,SET_SIGNAL_STRENGTH_REPORTING_CRITERIA,_1_5) \
    c(157,160,setLinkCapacityReportingCriteria,SET_LINK_CAPACITY_REPORTING_CRITERIA,_1_5) \
    c(158,161,enableUiccApplications,ENABLE_UICC_APPLICATIONS,) \
    c(159,162,areUiccApplicationsEnabled,ARE_UICC_APPLICATIONS_ENABLED,) \
    c(160,163,setSystemSelectionChannels,SET_SYSTEM_SELECTION_CHANNELS,_1_5) \
    c(161,164,startNetworkScan,START_NETWORK_SCAN,_1_5) \
    c(162,165,setupDataCall,SETUP_DATA_CALL,_1_5) \
    c(163,167,setInitialAttachApn,SET_INITIAL_ATTACH_APN,_1_5) \
    c(164,168,setDataProfile,SET_DATA_PROFILE,_1_5) \
    c(165,169,setRadioPower,SET_RADIO_POWER,_1_5) \
    c(166,170,setIndicationFilter,SET_INDICATION_FILTER,_1_5) \
    c(167,171,getBarringInfo,GET_BARRING_INFO,) \
    c(168,172,getVoiceRegistrationState,GET_VOICE_REGISTRATION_STATE,_1_5) \
    c(169,173,getDataRegistrationState,GET_DATA_REGISTRATION_STATE,_1_5) \
    c(170,175,setNetworkSelectionModeManual,SET_NETWORK_SELECTION_MODE_MANUAL,_1_5) \
    c(171,176,sendCdmaSmsExpectMore,SEND_CDMA_SMS_EXPECT_MORE,) \
    c(172,177,supplySimDepersonalization,SUPPLY_SIM_PERSONALIZATION,)

/* e(code,eventName,EVENT_NAME) */
#define RADIO_EVENT_1_0(e) \
    e(1,radioStateChanged,RADIO_STATE_CHANGED) \
    e(2,callStateChanged,CALL_STATE_CHANGED) \
    e(3,networkStateChanged,NETWORK_STATE_CHANGED) \
    e(4,newSms,NEW_SMS) \
    e(5,newSmsStatusReport,NEW_SMS_STATUS_REPORT) \
    e(6,newSmsOnSim,NEW_SMS_ON_SIM) \
    e(7,onUssd,ON_USSD) \
    e(8,nitzTimeReceived,NITZ_TIME_RECEIVED) \
    e(9,currentSignalStrength,CURRENT_SIGNAL_STRENGTH) \
    e(10,dataCallListChanged,DATA_CALL_LIST_CHANGED) \
    e(11,suppSvcNotify,SUPP_SVC_NOTIFY) \
    e(12,stkSessionEnd,STK_SESSION_END) \
    e(13,stkProactiveCommand,STK_PROACTIVE_COMMAND) \
    e(14,stkEventNotify,STK_EVENT_NOTIFY) \
    e(15,stkCallSetup,STK_CALL_SETUP) \
    e(16,simSmsStorageFull,SIM_SMS_STORAGE_FULL) \
    e(17,simRefresh,SIM_REFRESH) \
    e(18,callRing,CALL_RING) \
    e(19,simStatusChanged,SIM_STATUS_CHANGED) \
    e(20,cdmaNewSms,CDMA_NEW_SMS) \
    e(21,newBroadcastSms,NEW_BROADCAST_SMS) \
    e(22,cdmaRuimSmsStorageFull,CDMA_RUIM_SMS_STORAGE_FULL) \
    e(23,restrictedStateChanged,RESTRICTED_STATE_CHANGED) \
    e(24,enterEmergencyCallbackMode,ENTER_EMERGENCY_CALLBACK_MODE) \
    e(25,cdmaCallWaiting,CDMA_CALL_WAITING) \
    e(26,cdmaOtaProvisionStatus,CDMA_OTA_PROVISION_STATUS) \
    e(27,cdmaInfoRec,CDMA_INFO_REC) \
    e(28,indicateRingbackTone,INDICATE_RINGBACK_TONE) \
    e(29,resendIncallMute,RESEND_INCALL_MUTE) \
    e(30,cdmaSubscriptionSourceChanged,CDMA_SUBSCRIPTION_SOURCE_CHANGED) \
    e(31,cdmaPrlChanged,CDMA_PRL_CHANGED) \
    e(32,exitEmergencyCallbackMode,EXIT_EMERGENCY_CALLBACK_MODE) \
    e(33,rilConnected,RIL_CONNECTED) \
    e(34,voiceRadioTechChanged,VOICE_RADIO_TECH_CHANGED) \
    e(35,cellInfoList,CELL_INFO_LIST) \
    e(36,imsNetworkStateChanged,IMS_NETWORK_STATE_CHANGED) \
    e(37,subscriptionStatusChanged,SUBSCRIPTION_STATUS_CHANGED) \
    e(38,srvccStateNotify,SRVCC_STATE_NOTIFY) \
    e(39,hardwareConfigChanged,HARDWARE_CONFIG_CHANGED) \
    e(40,radioCapabilityIndication,RADIO_CAPABILITY_INDICATION) \
    e(41,onSupplementaryServiceIndication,ON_SUPPLEMENTARY_SERVICE_INDICATION) \
    e(42,stkCallControlAlphaNotify,STK_CALL_CONTROL_ALPHA_NOTIFY) \
    e(43,lceData,LCE_DATA) \
    e(44,pcoData,PCO_DATA) \
    e(45,modemReset,MODEM_RESET)

#define RADIO_EVENT_1_1(e) \
    e(46,carrierInfoForImsiEncryption,CARRIER_INFO_FOR_IMSI_ENCRYPTION) \
    e(47,networkScanResult,NETWORK_SCAN_RESULT) \
    e(48,keepaliveStatus,KEEPALIVE_STATUS)

#define RADIO_EVENT_1_2(e)  /* Since 1.2.0 */ \
    e(49,networkScanResult_1_2,NETWORK_SCAN_RESULT_1_2) \
    e(50,cellInfoList_1_2,CELL_INFO_LIST_1_2) \
    e(51,currentLinkCapacityEstimate,CURRENT_LINK_CAPACITY_ESTIMATE) \
    e(52,currentPhysicalChannelConfigs,CURRENT_PHYSICAL_CHANNEL_CONFIGS) \
    e(53,currentSignalStrength_1_2,CURRENT_SIGNAL_STRENGTH_1_2)

#define RADIO_EVENT_1_4(e)  /* Since 1.2.5 */ \
    e(54,currentEmergencyNumberList,CURRENT_EMERGENCY_NUMBER_LIST) \
    e(55,cellInfoList_1_4,CELL_INFO_LIST_1_4) \
    e(56,networkScanResult_1_4,NETWORK_SCAN_RESULT_1_4) \
    e(57,currentPhysicalChannelConfigs_1_4,CURRENT_PHYSICAL_CHANNEL_CONFIGS_1_4) \
    e(58,dataCallListChanged_1_4,DATA_CALL_LIST_CHANGED_1_4) \
    e(59,currentSignalStrength_1_4,CURRENT_SIGNAL_STRENGTH_1_4)

#define RADIO_EVENT_1_5(e)  /* Since 1.5.0 */ \
    e(60,uiccApplicationsEnablementChanged, UICC_APPLICATION_ENABLEMENT_CHANGED) \
    e(61,registrationFailed, REGISTRATION_FAILED) \
    e(62,barringInfoChanged, BARRING_INFO_CHANGED) \
    e(63,cellInfoList_1_5,CELL_INFO_LIST_1_5) \
    e(64,networkScanResult_1_5,NETWORK_SCAN_RESULT_1_5) \
    e(65,dataCallListChanged_1_5,DATA_CALL_LIST_CHANGED_1_5)

typedef enum radio_req {
    RADIO_REQ_ANY = 0,
    RADIO_REQ_NONE = 0,
#define RADIO_REQ_(req,resp,Name,NAME) RADIO_REQ_##NAME = req,
#define RADIO_REQ__(req,resp,Name,NAME,x) RADIO_REQ_##NAME##x = req,

    /* android.hardware.radio@1.0::IRadio */
    RADIO_REQ_SET_RESPONSE_FUNCTIONS = 1, /* setResponseFunctions */
    RADIO_CALL_1_0(RADIO_REQ_)
    RADIO_REQ_RESPONSE_ACKNOWLEDGEMENT = 130,  /* responseAcknowledgement */
    RADIO_1_0_REQ_LAST = RADIO_REQ_RESPONSE_ACKNOWLEDGEMENT,

    /* android.hardware.radio@1.1::IRadio */
    RADIO_CALL_1_1(RADIO_REQ_)
    RADIO_1_1_REQ_LAST = RADIO_REQ_STOP_KEEPALIVE,

    /* android.hardware.radio@1.2::IRadio */
    RADIO_CALL_1_2(RADIO_REQ_)
    RADIO_REQ_START_NETWORK_SCAN_1_2 = 137,
    RADIO_REQ_SET_INDICATION_FILTER_1_2 = 138,
    RADIO_REQ_SETUP_DATA_CALL_1_2 = 141,
    RADIO_REQ_DEACTIVATE_DATA_CALL_1_2 = 142,
    RADIO_1_2_REQ_LAST = RADIO_REQ_DEACTIVATE_DATA_CALL_1_2,

    /* android.hardware.radio@1.3::IRadio */
    RADIO_CALL_1_3(RADIO_REQ_) /* Since 1.2.5 */
    RADIO_1_3_REQ_LAST = RADIO_REQ_GET_MODEM_STACK_STATUS,

    /* android.hardware.radio@1.4::IRadio */
    RADIO_CALL_1_4_(RADIO_REQ__) /* Since 1.2.5 */
    RADIO_REQ_SET_INITIAL_ATTACH_APN_1_4 = 147,
    RADIO_REQ_SET_DATA_PROFILE_1_4 = 148,
    RADIO_1_4_REQ_LAST = RADIO_REQ_GET_SIGNAL_STRENGTH_1_4,

    /* android.hardware.radio@1.5::IRadio */
    RADIO_CALL_1_5_(RADIO_REQ__) /* Since 1.5.0 */
    RADIO_1_5_REQ_LAST = RADIO_REQ_SUPPLY_SIM_PERSONALIZATION
#undef RADIO_REQ_
#undef RADIO_REQ__
} RADIO_REQ;
G_STATIC_ASSERT(sizeof(RADIO_REQ) == 4);

typedef enum radio_resp {
    RADIO_RESP_ANY = 0,
    RADIO_RESP_NONE = 0,
#define RADIO_RESP_(req,resp,Name,NAME) RADIO_RESP_##NAME = resp,
#define RADIO_RESP__(req,resp,Name,NAME,x) RADIO_RESP_##NAME##x = resp,

    /* android.hardware.radio@1.0::IRadioResponse */
    RADIO_CALL_1_0(RADIO_RESP_)
    RADIO_RESP_ACKNOWLEDGE_REQUEST = 129, /* acknowledgeRequest */
    RADIO_1_0_RESP_LAST = RADIO_RESP_ACKNOWLEDGE_REQUEST, /* Since 1.2.4 */

    /* android.hardware.radio@1.1::IRadioResponse */
    RADIO_CALL_1_1(RADIO_RESP_)
    RADIO_1_1_RESP_LAST = RADIO_RESP_STOP_KEEPALIVE,      /* Since 1.2.4 */

    /* android.hardware.radio@1.2::IRadioResponse */
    RADIO_CALL_1_2(RADIO_RESP_)
    RADIO_RESP_GET_CELL_INFO_LIST_1_2 = 136,
    RADIO_RESP_GET_ICC_CARD_STATUS_1_2 = 137,
    RADIO_RESP_GET_CURRENT_CALLS_1_2 = 140,
    RADIO_RESP_GET_SIGNAL_STRENGTH_1_2 = 141,
    RADIO_RESP_GET_VOICE_REGISTRATION_STATE_1_2 = 142,
    RADIO_RESP_GET_DATA_REGISTRATION_STATE_1_2 = 143,
    RADIO_1_2_RESP_LAST = RADIO_RESP_GET_DATA_REGISTRATION_STATE_1_2, /* Since 1.2.4 */

    /* android.hardware.radio@1.3::IRadioResponse */
    RADIO_CALL_1_3(RADIO_RESP_) /* Since 1.2.5 */
    RADIO_1_3_RESP_LAST = RADIO_RESP_GET_MODEM_STACK_STATUS,

    /* android.hardware.radio@1.4::IRadioResponse */
    RADIO_CALL_1_4_(RADIO_RESP__) /* Since 1.2.5 */
    RADIO_RESP_GET_CELL_INFO_LIST_1_4 = 149,
    RADIO_RESP_GET_DATA_REGISTRATION_STATE_1_4 = 150,
    RADIO_RESP_GET_ICC_CARD_STATUS_1_4 = 151,
    RADIO_RESP_GET_DATA_CALL_LIST_1_4 = 154,
    RADIO_1_4_RESP_LAST = RADIO_RESP_GET_SIGNAL_STRENGTH_1_4,

    /* android.hardware.radio@1.5::IRadioResponse */
    RADIO_CALL_1_5_(RADIO_RESP__) /* Since 1.5.0 */
    RADIO_RESP_GET_DATA_CALL_LIST_1_5 = 166,
    RADIO_RESP_GET_CELL_INFO_LIST_1_5 = 174,
    RADIO_RESP_GET_ICC_CARD_STATUS_1_5 = 178,
    RADIO_1_5_RESP_LAST = RADIO_RESP_GET_ICC_CARD_STATUS_1_5
#undef RADIO_RESP_
#undef RADIO_RESP__
} RADIO_RESP;
G_STATIC_ASSERT(sizeof(RADIO_RESP) == 4);

/* These identifiers were shortened in 1.4.3 */
#define RADIO_RESP_GET_CELL_INFO_LIST_RESPONSE_1_4 \
        RADIO_RESP_GET_CELL_INFO_LIST_1_4
#define RADIO_RESP_GET_DATA_REGISTRATION_STATE_RESPONSE_1_4 \
        RADIO_RESP_GET_DATA_REGISTRATION_STATE_1_4
#define RADIO_RESP_GET_ICC_CARD_STATUS_RESPONSE_1_4 \
        RADIO_RESP_GET_ICC_CARD_STATUS_1_4
#define RADIO_RESP_GET_DATA_CALL_LIST_RESPONSE_1_4 \
        RADIO_RESP_GET_DATA_CALL_LIST_1_4
#define RADIO_RESP_SETUP_DATA_CALL_RESPONSE_1_4 \
        RADIO_RESP_SETUP_DATA_CALL_1_4

/* These were renamed in 1.4.5 for consistency */
#define RADIO_REQ_START_NETWORKSCAN_1_4 RADIO_REQ_START_NETWORK_SCAN_1_4
#define RADIO_RESP_START_NETWORKSCAN_1_4 RADIO_RESP_START_NETWORK_SCAN_1_4

typedef enum radio_ind {
    RADIO_IND_ANY = 0,
    RADIO_IND_NONE = 0,
#define RADIO_IND_(code,Name,NAME) RADIO_IND_##NAME = code,

    /* android.hardware.radio@1.0::IRadioIndication */
    RADIO_EVENT_1_0(RADIO_IND_)
    RADIO_1_0_IND_LAST = RADIO_IND_MODEM_RESET,  /* Since 1.2.4 */

    /* android.hardware.radio@1.1::IRadioIndication */
    RADIO_EVENT_1_1(RADIO_IND_)
    RADIO_1_1_IND_LAST = RADIO_IND_KEEPALIVE_STATUS,  /* Since 1.2.4 */

    /* android.hardware.radio@1.2::IRadioIndication */
    RADIO_EVENT_1_2(RADIO_IND_)
    RADIO_1_2_IND_LAST = RADIO_IND_CURRENT_SIGNAL_STRENGTH_1_2, /* Since 1.2.4 */

    /* android.hardware.radio@1.3::IRadioIndication */
    RADIO_1_3_IND_LAST = RADIO_1_2_IND_LAST, /* Since 1.2.5 */

    /* android.hardware.radio@1.4::IRadioIndication */
    RADIO_EVENT_1_4(RADIO_IND_)
    RADIO_1_4_IND_LAST = RADIO_IND_CURRENT_SIGNAL_STRENGTH_1_4, /* Since 1.2.5 */

    /* android.hardware.radio@1.5::IRadioIndication */
    RADIO_EVENT_1_5(RADIO_IND_)
    RADIO_1_5_IND_LAST = RADIO_IND_DATA_CALL_LIST_CHANGED_1_5 /* Since 1.5.0 */
#undef RADIO_IND_
} RADIO_IND;
G_STATIC_ASSERT(sizeof(RADIO_IND) == 4);

/* Legacy macro. Ignore it */

#define DATA_CALL_VERSION (11)

/* Logging */

#define GBINDER_RADIO_LOG_MODULE gbinder_radio_log

extern GLogModule GBINDER_RADIO_LOG_MODULE;

G_END_DECLS

#endif /* RADIO_TYPES_H */

/*
 * Local Variables:
 * mode: C
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 */
